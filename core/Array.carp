(defmodule Array

  (defn reduce [f x xs]
    (let [total x]
      (do
        (for [i 0 (count xs)]
          (set! &total (f &total (nth xs i))))
        total)))

  (defn first [a]
    @(Array.nth a 0))

  (defn last [a]
    @(Array.nth a (Int.dec (Array.count a))))

  (defn max [xs]
    (let [result (first xs)
          n (count xs)]
      (do
        (for [i 0 n]
          (let [x @(nth xs i)]
            (if (Int.< result x)
              (set! &result x)
              ())))
        result)))

  (defn min [xs]
    (let [result (first xs)
          n (count xs)]
      (do
        (for [i 0 n]
          (let [x @(nth xs i)]
            (if (Int.> result x)
              (set! &result x)
              ())))
        result)))

  (defn sum [xs]
    (Array.reduce add-ref (zero) xs))

  (defn subarray [xs start-index]
    (let [result []]
      (do
        (for [i start-index (count xs)]
          (set! &result (push-back @&result @(nth xs i))))
        result)))

  (defn reverse [a]
    (let-do [i 0
             j (Int.dec (count &a))]
      (while (Int.< i j)
        (let-do [tmp @(nth &a i)]
          (aset! &a i @(nth &a j))
          (set! &i (Int.inc i))
          (aset! &a j tmp)
          (set! &j (Int.dec j))))
      a))
)
