(defmodule String
  (register =          (Fn [&String &String] Bool))
  (register /=         (Fn [&String &String] Bool))
  (register append     (Fn [String String] String)) ;; TODO: should take a &String as its second argument?
  (register delete     (Fn [String] ()))
  (register copy       (Fn [&String] String))
  (register count      (Fn [&String] Int))
  (register duplicate  (Fn [&String] String))
  (register cstr       (Fn [&String] (Ptr Char)))
  (register str        (Fn [&String] String))
  (register chars      (Fn [&String] (Array Char)))
  (register from-chars (Fn [(Array Char)] String))

  (defn repeat [n inpt]
    (let [str ""]
      (do
        (for [i 0 n]
          (set! &str &(append @str @inpt)))
        @str)))

  (use Int)
  (use Array)

  ;; A temporary version of this function, until we have some nicer way to write it
  (defn split-by [s separators]
    (let [len (count &s)
          result (the (Array String) [])
          cs (chars &s)
          word @""]
      (do
        (for [i 0 len]
          (let [c (nth &cs i)]
            (do
              (if (< 0 (element-count &(the (Array Char) @&separators) @c))
                (if (= 0 (count &word))
                  () ;; no word
                  (do (set! &result (push-back @&result @&word))
                      (set! &word @"")))
                (set! &word (append @&word (from-chars [@c])))))))
        ;; Some sweet code duplication for the final word:
        (if (= 0 (count &word))
          ()
          (do (set! &result (push-back @&result @&word))
              (set! &word @"")))
        result)))

  (defn words [s]
    (split-by s [\space \tab]))

  (defn lines [s]
    (split-by s [\newline]))
  )


(defdynamic string-join- [strs]
  (if (= (count strs) 0)
    (String.copy "")
    (list 'String.append (car strs) (string-join- (cdr strs)))))

(defmacro string-join [:rest strs]
  (string-join- strs))
