(system-include "carp_system.h")

(defmodule System
  (doc free "Frees an object. Should not be called except in direst circumstances.")
  (register free (Fn [t] ()))
  (doc time "Gets the current system time as an integer.")
  (register time (Fn [] Int))
  (doc seed-random "Seeds the random number generator.")
  (register seed-random (Fn [Int] ()))
  (doc sleep-seconds "Sleeps for a specified number of seconds.")
  (register sleep-seconds (Fn [Int] ()))
  (doc sleep-seconds "Sleeps for a specified number of microseconds.")
  (register sleep-micros (Fn [Int] ()))
  (doc system "Performs a system command.")
  (register system (Fn [&String] ()))
  (doc get-arg "Gets the command line argument at a specified index.")
  (register get-arg (Fn [Int] (Ref String)))
  (doc get-arg "Gets the number of command line arguments.")
  (register get-args-len (Fn [] Int))
)

(defmodule Int
  (register random (λ [] Int))
  (register random-between (λ [Int Int] Int))
)

(defmodule Float
  (register random (λ [] Float))
  (register random-between (λ [Float Float] Float))
)

(defmodule Long
  (register random (λ [] Long))
  (register random-between (λ [Long Long] Long))
)

(defmodule Double
  (register random (λ [] Double))
  (register random-between (λ [Double Double] Double))
)

(defmodule Char
  (defn random []
    (from-int (Int.random)))

  (defn random-between [a b]
    (from-int (Int.random-between (to-int a) (to-int b))))
)

(defmodule String
  (defn random-sized [n]
    (from-chars &(Array.repeat n Char.random)))
)
