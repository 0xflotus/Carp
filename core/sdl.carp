(system-include "math.h")
(local-include "../core/SDLHelper.h")
(add-cflag "`sdl2-config --cflags --libs`")
(add-cflag "-D_THREAD_SAFE")

;; Types
(register-type SDL_Keycode)
(register-type SDL_Rect)
(register-type SDL_Point)
(register-type SDL_Event)
(register-type SDL_EventType)
(register-type SDL_Texture)
(register-type SDL_Renderer)
(register-type SDL_BlendMode)
(register-type SDL_RendererFlip)
(register-type SDL_Window)

(defmodule SDL
  ;; Setup and teardown
  (register INIT_EVERYTHING Int) ;; Weird macro
  (register init                       (Fn [Int] ()))
  (register create-window-and-renderer (Fn [Int Int Int (Ptr (Ptr SDL_Window)) (Ptr (Ptr SDL_Renderer))] ()) "SDL_CreateWindowAndRenderer")
  (register set-window-title           (Fn [(Ptr SDL_Window) (Ptr Char)] ()) "SDL_SetWindowTitle")
  (register delay                      (Fn [Int] ()) "SDL_Delay")
  (register destroy-window             (Fn [(Ptr SDL_Window)] ()) "SDL_DestroyWindow")
  (register quit                       (Fn [] ()) "SDL_Quit")

  (defmodule Event
    (register init (Fn [] SDL_Event))
    (register type (Fn [(Ref SDL_Event)] SDL_EventType))
    (register keycode (Fn [(Ref SDL_Event)] SDL_Keycode))
    (register poll (Fn [(Ptr SDL_Event)] Bool) "SDL_PollEvent")
    (register = (Fn [SDL_EventType SDL_EventType] Bool))
    (register quit              SDL_EventType "SDL_QUIT")
    (register key-down          SDL_EventType "SDL_KEYDOWN")
    (register key-up            SDL_EventType "SDL_KEYUP")
    (register mouse-motion      SDL_EventType "SDL_MOUSEMOTION")
    (register mouse-button-down SDL_EventType "SDL_MOUSEBUTTONDOWN")
    (register mouse-button-up   SDL_EventType "SDL_MOUSEBUTTONUP")
    (register mouse-wheel       SDL_EventType "SDL_MOUSEWHEEL"))

  ;; Helpers (not part of SDL)
  (register rect (Fn [Int Int Int Int] SDL_Rect)) ;; x y w h
  (register point (Fn [Int Int] SDL_Point)) ;; x y

  ;; Rendering
  (register render-present (Fn [(Ptr SDL_Renderer)] ()) "SDL_RenderPresent")
  (register render-clear (Fn [(Ptr SDL_Renderer)] ()) "SDL_RenderClear")
  (register render-copy (Fn [(Ptr SDL_Renderer) (Ptr SDL_Texture) (Ptr SDL_Rect) (Ptr SDL_Rect)] ()) "SDL_RenderCopy") ;; src-rect & dest-rect
  (register render-copy-ex (Fn [(Ptr SDL_Renderer) (Ptr SDL_Texture) (Ptr SDL_Rect) (Ptr SDL_Rect) Double (Ptr SDL_Point) SDL_RendererFlip] ()) "SDL_RenderCopyEx") ;; src-rect, dest-rect, angle, center, flip
  (register set-render-draw-color (Fn [(Ptr SDL_Renderer) Int Int Int Int] ()) "SDL_SetRenderDrawColor") ;; rgba
  (register render-fill-rect (Fn [(Ptr SDL_Renderer) (Ptr SDL_Rect)] ()) "SDL_RenderFillRect")
  (register render-fill-rects (Fn [(Ptr SDL_Renderer) (Ptr SDL_Rect) Int] ()) "SDL_RenderFillRects") ;; rects, count
  (register render-draw-line (Fn [(Ptr SDL_Renderer) Int Int Int Int] ()) "SDL_RenderDrawLine") ;; x1 y1 x2 y2
  (register render-draw-lines (Fn [(Ptr SDL_Renderer) (Ptr SDL_Point) Int] ()) "SDL_RenderDrawLines") ;; lines, count
  (register destroy-texture (Fn [(Ptr SDL_Texture)] ()) "SDL_DestroyTexture")
  (register set-render-draw-blend-mode (Fn [(Ptr SDL_Renderer) SDL_BlendMode] ()) "SDL_SetRenderDrawBlendMode")
  (register blit-surface (Fn [(Ptr SDL_Surface) (Ptr SDL_Rect) (Ptr SDL_Surface) (Ptr SDL_Rect)] ()) "SDL_BlitSurface") ;; src, srcrect, dst, dstrect
  (register query-texture (Fn [(Ptr SDL_Texture) (Ptr Int) (Ptr Int) (Ptr Int) (Ptr Int)] ()) "SDL_QueryTexture") ;; ? ? w h

  ;; Blend modes
  (register blend-mode-none SDL_BlendMode "SDL_BLENDMODE_NONE")
  (register blend-mode-blend SDL_BlendMode "SDL_BLENDMODE_BLEND")
  (register blend-mode-add SDL_BlendMode "SDL_BLENDMODE_ADD")
  (register blend-mode-mod SDL_BlendMode "SDL_BLENDMODE_MOD")

  ;; SDL_RendererFlip
  (register flip-none SDL_RendererFlip "SDL_FLIP_NONE")
  (register flip-horizontal SDL_RendererFlip "SDL_FLIP_HORIZONTAL")
  (register flip-vertical SDL_RendererFlip "SDL_FLIP_VERTICAL")

  ;; Keys
  (register key-return SDL_Keycode "SDLK_RETURN")
  (register key-space SDL_Keycode "SDLK_SPACE")
  (register key-escape SDL_Keycode "SDLK_ESCAPE")
  (register key-left SDL_Keycode "SDLK_LEFT")
  (register key-right SDL_Keycode "SDLK_RIGHT")
  (register key-up SDL_Keycode "SDLK_UP")
  (register key-down SDL_Keycode "SDLK_DOWN")

  (defmodule Keycode
    (register = (Fn [SDL_Keycode SDL_Keycode] Bool))
    (register copy (Fn [(Ref SDL_Keycode)] SDL_Keycode))
    (register str (Fn [SDL_Keycode] String))
    (defn prn [x]
      (SDL.Keycode.str x))
    (defn /= [x y]
      (not (SDL.Keycode.= x y))))

  ;; Mouse
  ;; (register get-mouse-state (Fn [(Ptr Int) (Ptr Int)] Int) "SDL_GetMouseState")
  ;; (register button (Fn [Int] Int) "SDL_BUTTON")
  ;; (register button-left Int "BUTTON_LEFT")
  ;; (register button-right Int "BUTTON_RIGHT")

  ;; (deftype MouseState [x Int
  ;;                      y Int
  ;;                      left Bool
  ;;                      right Bool])

  ;; (defn get-mouse-state []
  ;;   (let [x 0
  ;;         y 0
  ;;         state (SDL.get-mouse-state (address x) (address y))
  ;;         l (/= 0 (Int.bit-and state (SDL.button SDL.button-left)))
  ;;         r (/= 0 (Int.bit-and state (SDL.button SDL.button-right)))]
  ;;     (MouseState.init x y l r)))

  ;; Time
  (register get-ticks (Fn [] Int) "SDL_GetTicks")

  )

;; App helper
(deftype SDLApp
    [window (Ptr SDL_Window)
     renderer (Ptr SDL_Renderer)
     draw (Fn [&SDLApp (Ptr SDL_Renderer)] ())
     event-handler (Fn [&SDLApp] ())])

(defmodule SDLApp
  (defn create [title width height draw-fn event-fn]
    (let [_ SDL.INIT_EVERYTHING
          win NULL
          ren NULL]
      (do (SDL.create-window-and-renderer width height 0 (address win) (address ren))
          (SDL.set-window-title win (cstr title))
          (SDLApp.init win ren draw-fn event-fn))))
  (defn run [app]
    (let [event-fn @(SDLApp.event-handler app)
          draw-fn @(SDLApp.draw app)
          rend @(SDLApp.renderer app)]
      (while true
        (do
          (event-fn app)
          (draw-fn app rend)
          (SDL.render-present rend)
          (SDL.delay 30)))))
  (defn stop [app]
    (do (SDL.destroy-window @(window app))
        (SDL.quit)
        (System.exit 0)))
  (defn no-draw [app rend]
    ())
  (defn no-event-handler [app]
    ()))
