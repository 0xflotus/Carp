(system-include "math.h")
(local-include "../core/SDLHelper.h")
(add-cflag "`sdl2-config --cflags --libs`")
(add-cflag "-D_THREAD_SAFE")

;; Types
(register-type SDL_Keycode)
(register-type SDL_Rect)
(register-type SDL_Point)
(register-type SDL_Event)
(register-type SDL_EventType)
(register-type SDL_Texture)
(register-type SDL_Renderer)
(register-type SDL_BlendMode)
(register-type SDL_RendererFlip)
(register-type SDL_Window)

(defmodule SDL
  ;; Setup and quit
  (register Init (Fn [Int] ()))
  (register CreateWindowAndRenderer (Fn [Int Int Int (Ptr (Ptr SDL_Window)) (Ptr (Ptr SDL_Renderer))] ()))
  (register SetWindowTitle (Fn [(Ptr SDL_Window) (Ptr Char)] ()))
  (register Delay (Fn [Int] ()))
  (register INIT_EVERYTHING Int)
  (register DestroyWindow (Fn [(Ptr Window)] ()))
  (register Quit (Fn [(Ptr Window)] ()))

  ;; SDL_EventType
  (register QUIT SDL_EventType)
  (register KEYDOWN SDL_EventType)
  (register UP SDL_EventType)
  (register MOUSEMOTION SDL_EventType)
  (register MOUSEBUTTONDOWN SDL_EventType)
  (register MOUSEBUTTONUP SDL_EventType)
  (register MOUSEWHEEL SDL_EventType)

  (defmodule EventType
    (register = (Fn [SDL_EventType SDL_EventType] Bool)))

  (register make-rect (Fn [Int Int Int Int] SDL_Rect)) ;; x y w h
  (register make-point (Fn [Int Int] SDL_Point))

  ;; Rendering
  (register RenderPresent (Fn [(Ptr SDL_Renderer)] ()))
  (register RenderClear (Fn [(Ptr SDL_Renderer)] ()))
  (register RenderCopy (Fn [(Ptr SDL_Renderer) (Ptr SDL_Texture) (Ptr SDL_Rect) (Ptr SDL_Rect)] ())) ;; src-rect & dest-rect
  (register RenderCopyEx (Fn [(Ptr SDL_Renderer) (Ptr SDL_Texture) (Ptr SDL_Rect) (Ptr SDL_Rect) Double (Ptr SDL_Point) SDL_RendererFlip] ())) ;; src-rect, dest-rect, angle, center, flip
  (register SetRenderDrawColor (Fn [(Ptr SDL_Renderer) Int Int Int Int] ())) ;; rgba
  (register RenderFillRect (Fn [(Ptr SDL_Renderer) (Ptr SDL_Rect)] ()))
  (register RenderFillRects (Fn [(Ptr SDL_Renderer) (Ptr SDL_Rect) Int] ())) ;; rects, count
  (register RenderDrawLine (Fn [(Ptr SDL_Renderer) Int Int Int Int] ())) ;; x1 y1 x2 y2
  (register RenderDrawLines (Fn [(Ptr SDL_Renderer) (Ptr SDL_Point) Int] ())) ;; lines, count
  (register DestroyTexture (Fn [(Ptr SDL_Texture)] ()))
  (register SetRenderDrawBlendMode (Fn [(Ptr SDL_Renderer) SDL_BlendMode] ()))
  (register BlitSurface (Fn [(Ptr SDL_Surface) (Ptr SDL_Rect) (Ptr SDL_Surface) (Ptr SDL_Rect)] ())) ;; src, srcrect, dst, dstrect
  (register QueryTexture (Fn [(Ptr SDL_Texture) (Ptr Int) (Ptr Int) (Ptr Int) (Ptr Int)] ())) ;; ? ? w h

  ;; Blend modes
  (register BLENDMODE_NONE SDL_BlendMode)
  (register BLENDMODE_BLEND SDL_BlendMode)
  (register BLENDMODE_ADD SDL_BlendMode)
  (register BLENDMODE_MOD SDL_BlendMode)

  ;; SDL_RendererFlip
  (register FLIP_NONE SDL_RendererFlip)
  (register FLIP_HORIZONTAL SDL_RendererFlip)
  (register FLIP_VERTICAL SDL_RendererFlip)

  ;; Events
  (register poll-event (Fn [(Ptr SDL_Event)] Bool) "SDL_PollEvent")
  (register event-init (Fn [] SDL_Event))
  (register event-type (Fn [(Ref SDL_Event)] SDL_EventType))
  (register event-keycode (Fn [(Ref SDL_Event)] SDL_Keycode))

  ;; Keys
  (register key-return SDL_Keycode "SDLK_RETURN")
  (register key-space SDL_Keycode "SDLK_SPACE")
  (register key-escape SDL_Keycode "SDLK_ESCAPE")
  (register key-left SDL_Keycode "SDLK_LEFT")
  (register key-right SDL_Keycode "SDLK_RIGHT")
  (register key-up SDL_Keycode "SDLK_UP")
  (register key-down SDL_Keycode "SDLK_DOWN")

  (defmodule Keycode
    (register = (Fn [SDL_Keycode SDL_Keycode] Bool))
    (register copy (Fn [(Ref SDL_Keycode)] SDL_Keycode))
    (register str (Fn [SDL_Keycode] String))
    (defn prn [x]
      (SDL.Keycode.str x))
    (defn /= [x y]
      (not (SDL.Keycode.= x y))))

  ;; Mouse
  (register GetMouseState (Fn [(Ptr Int) (Ptr Int)] Int))
  (register BUTTON (Fn [Int] Int))
  (register BUTTON_LEFT Int)
  (register BUTTON_RIGHT Int)

  (deftype MouseState [x Int
                       y Int
                       left Bool
                       right Bool])

  (defn get-mouse-state []
    (let [x 0
          y 0
          state (GetMouseState (address x) (address y))
          l (/= 0 (Int.bit-and state (SDL.BUTTON SDL.BUTTON_LEFT)))
          r (/= 0 (Int.bit-and state (SDL.BUTTON SDL.BUTTON_RIGHT)))]
      (MouseState.init x y l r)))

  ;; Time
  (register GetTicks (Fn [] Int))

  )

;; App helper
(deftype SDLApp
    [window (Ptr SDL_Window)
     renderer (Ptr SDL_Renderer)])

(defmodule SDLApp
  (defn start [title width height]
    (let [_ SDL.INIT_EVERYTHING
          win NULL
          ren NULL]
      (do (SDL.CreateWindowAndRenderer width height 0 (address win) (address ren))
          (SDL.SetWindowTitle win (cstr title))
          (SDLApp.init win ren))))
  (defn stop [app]
    (do ())))
