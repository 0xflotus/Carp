;; This file contains examples of unsolved bugs

(Debug.sanitize-addresses)
(Project.config "print-ast" true)

;; This shouldn't compile:
;; (defn faulty-repeat [n inpt]
;;     (let [str ""]
;;       (do
;;         (for [i 0 n]
;;           (set! str &(append @str @inpt)))
;;         @str)))
;; (defn main []
;;   (let [strings (faulty-repeat 20 "x")]
;;     (IO.println &strings)))

;; ;; Dangling reference to member variable.
;; (deftype S [f String])
;; (defn main []
;;   (let [s (S.init @"hello")
;;         r (S.f &s)
;;         _ (S.set-f s @"bye")]
;;     (IO.println r)))

;; ;; Dangling reference to variable.
;; (defn main []
;;   (let [s @"hello"
;;         r &s]
;;     (do (String.delete s)
;;         (IO.println r))))

;; ;; This crashes the compiler:
;; (defn x [a] (the Inthdfdf a))

;; ;; The error message for this is really bad:
;; (defn f []
;;   (let [s @"hej"]
;;     (do (delete s)
;;         s)))

;; Setting ref to value in short-lived scope
;; (defn main []
;;   (let-do [r &[1 2 3]]
;;     (let [xs [4 5 6]]
;;       (set! r &xs))
;;     (println* r)))


;; ;; '=' resolves to wrong thing
;;(deftype (Foo t) [x t])
;; (register-type Foo [x Int])
;; (defmodule Foo
;;   (defn = [a b]
;;     (= (Foo.x a) (Foo.x b))))

;; (info Foo)

;; (register-type Foo [x Int]) ;;(deftype (Foo t) [x t]) ;; <- this is the bug!

;; (info Foo)

;; (defn main []
;;   (do (println* (= &(Foo.init 123) &(Foo.init 666)))
;;       (println* (= &(Foo.init 123) &(Foo.init 123)))))


;; Problems with recursive calls again, fails to qualify at call site
;; (use Float)
;; (use Double)

;; (defmodule A
;;   (defn flurb [x y]
;;     (if (< x y)
;;       x
;;       (do
;;         (println* x)
;;         (flurb (- x y) y)))))

;; (defn blah []
;;   (A.flurb 5.5 1.0))

;; (defn main []
;;   (println* (blah)))




;; Even more recursive problems, this time if the file containing this is loaded twice:
;; (defn recursive [x]
;;   (if (<= x 0)
;;     x
;;     (do
;;       (println* x)
;;       (recursive (- x 1)))))

;; (defn main []
;;   (recursive 10))



(load "GLFW.carp")
(use GLFW)

(load "OpenGL.carp")
(load "Vector.carp")

(use Vector2)

(defn-do main []
  (let-do [_ (init)
           window (create-window 640 480 (cstr "GLFW <3 CARP") NULL NULL)]
    (make-context-current window))
  0)
