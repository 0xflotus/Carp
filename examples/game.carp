(use IO)
(use System)
(use Int)
(use Double)
(use Array)

(load "sdl.carp")
(load "sdl_image.carp")

(Project.config "title" "Game")

(def rand-max 400)

(defn r []
  (the Int (random-between 0 rand-max)))

(defn random-lines []
  (let [p1 (SDL.make-point (r) (r))
        p2 (SDL.make-point (r) (r))
        p3 (SDL.make-point (r) (r))]
    [p1 p2 p3 p1]))

(deftype Images
    [img1 (Ptr SDL_Texture)
     img2 (Ptr SDL_Texture)])

(defn dimensions [texture]
  (let [w 0
        h 0]
    (do
      (SDL.QueryTexture texture NULL NULL (address w) (address h))
      (SDL.make-rect 0 0 w h))))

(defn draw [rend images]
  (let [rect (SDL.make-rect 32 32 (- 512 64) (- 512 64))]
    (do
      (SDL.SetRenderDrawBlendMode rend SDL.BLENDMODE_ADD)
      (SDL.SetRenderDrawColor rend 0 0 0 255)
      (SDL.RenderClear rend)
      (SDL.SetRenderDrawColor rend 200 250 255 255)
      (SDL.RenderFillRect rend (address rect))
      (SDL.SetRenderDrawColor rend 100 50 255 155)
      (let [rects [(SDL.make-rect 48 48 16 16)
                   (SDL.make-rect 48 80 16 16)
                   (SDL.make-rect 48 112 16 16)
                   (SDL.make-rect 48 144 16 16)]
            n (count &rects)]
        (SDL.RenderFillRects rend (raw rects) n))
      (SDL.SetRenderDrawColor rend 255 50 100 255)
      (for [x 0 512 16]
        (do
          (SDL.RenderDrawLine rend x 0 512 512)
          (SDL.RenderDrawLine rend 512 (+ 256 (/ x 2)) 0 512)))
      (SDL.SetRenderDrawColor rend 0 0 0 255)
      (let [lines (random-lines)
            n (count &lines)]
        (SDL.RenderDrawLines rend (raw lines) n))
      (let [img @(Images.img1 (the (Ref Images) images))]
        (SDL.RenderCopyEx rend
                          img
                          (address (dimensions img))
                          (address (SDL.make-rect 100 100 300 300))
                          (* 0.1 (from-int (SDL.GetTicks)))
                          (address (SDL.make-point 150 150))
                          SDL.FLIP_NONE))
      (SDL.RenderPresent rend)
      )))

(defn handle-events [app rend]
  (let [event (SDL.event-init)]
    (while (SDL.poll-event (address event))
      (let [et (SDL.event-type &event)]
        (cond (= et SDL.QUIT) (quit &app)
              (= et SDL.KEYDOWN) (let [key (SDL.event-keycode &event)]
                                   (cond
                                     (= key SDL.key-escape) (quit &app)
                                     (println "Unrecognized key.")))
              (println "Some other event happened..."))))))

(defn main []
  (let [app (app-init (String.copy "~ CARP ~") 512 512)
        rend (app-renderer app)
        img1 (IMG_LoadTexture rend (cstr "./img/square.png"))
        img2 (IMG_LoadTexture rend (cstr "./img/carp_logo_969_no_texture.png"))
        images (Images.init img1 img2)]
    (do
      (println (ref (Images.str &images)))
      (while true
        (do
          (handle-events app rend)
          (draw rend &images)
          (SDL.Delay 30))))))

;; (build)
;; (run)
