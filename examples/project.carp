;;(reset! echo-signature-after-bake true)
;;(reset! log-unloading-of-dylibs true)
;;(reset! profile-infer-time true)
;;(reset! profile-external-compiler-time true)
;;(reset! log-deps-when-baking-ast true)
;;(reset! log-redefining-struct true)

;;(def carp-core-macros (open "../lisp/core_macros.carp"))
;;(def carp-core (read (open "../lisp/core.carp")))

;; (eb '(do (def MAP (fn [f xs]
;;                     (let [i 0
;;                           result (copy xs)]
;;                       (do
;;                         (while (< i (count xs))
;;                           (do (array-set! result i (f (nth xs i)))
;;                               (reset! i (inc i))))
;;                         result))))
;;          (MAP inc (array 1 2 3))))

;; (def fi (macro [a b c] (list 'if a c b)))
;; (fi true 10 20)

;; (def inc (fn [x] (+ x 1)))

;; (def fib (fn [x]
;;            (if (< x 2)
;;              1
;;              (+ (fib (- x 2))
;;                 (fib (- x 1))))))

;; (def g (fn [x] (* x x)))
;; (def h (fn [x] (+ (g x) (g x))))


;; (def make-counter (fn [start]
;;                     (let [value start]
;;                       (fn []
;;                         (do (reset! value (inc value))
;;                             value)))))

;; (def c1 (make-counter 10))
;; (def c2 (make-counter 10))

;; (println (str "c1: " (c1)))
;; (println (str "c1: " (c1)))
;; (println (str "c1: " (c1)))
;; (println (str "c2: " (c2)))

;; (match 2 1 "a" 2 "b" 3 "c")

;; (if true 10 20) (if false 10 20) (do (def t 0) (while (< t 10) (do (println (str t)) (reset! t (inc t)))))

;; (def defmacro (macro (name args body)
;;                      (list 'do
;;                            (list 'def name (list 'macro args body))
;;                            (list 'meta-set! name :name (str name)))))

;; (defmacro defn (name args body)
;;   (list 'do
;;         (list 'def name (list 'fn args body))
;;         (list 'meta-set! name :line (meta-get name :line))
;;         (list 'meta-set! name :name (str name))
;;         (list 'meta-set! name :user-defined true)))

;; (defn foo []
;;   (let [x 5
;;         y (* x 10)]
;;     (println (str y))))

;; (foo)

;; (load-lisp "../lisp/core.carp")
;; (load-lisp "../lisp/infer_types.carp")
;; (load-lisp "../lisp/compiler_helpers.carp")
;; (load-lisp "../lisp/sicp_solver.carp")

