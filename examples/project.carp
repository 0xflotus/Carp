;;(reset! echo-signature-after-bake true)
;;(reset! log-unloading-of-dylibs true)
;;(reset! profile-infer-time true)
;;(reset! profile-external-compiler-time true)
;;(reset! log-deps-when-baking-ast true)
;;(reset! log-redefining-struct true)

;; (def fib (fn [x]
;;            (if (< x 2)
;;              1
;;              (+ (fib (- x 2))
;;                 (fib (- x 1))))))

;; (def d1 {:a {}
;;          :b {:a 1
;;              :b 2
;;              :c 3}
;;          :c {:a {:x 100}
;;              :b {:x 200}
;;              :c {:x 300}}})

;; (def d2 {:a {}
;;          :b {:a 1
;;              :b 2
;;              :c 3}
;;          :c {:a {:x 100}
;;              :b {:x 66666}
;;              :c {:x 300}}})

;; (def d3 {:a {}
;;          :b {:a 1
;;              :b 2
;;              :c 3}
;;          :c {:a {:x 100}
;;              :b {:x 200}
;;              :c {:x 300}}})

;; (defn compare []
;;   (do
;;     (assert (not (= d1 d2)))
;;     (assert (= d1 d3))))

;;(time (for (i 0 50000) (compare))) ;; takes 4700 ms

;; (println (str "meta d1: " (meta d1)))
;; (println (str "meta d2: " (meta d2)))
;; (println (str "meta d3: " (meta d3)))

;;(meta {:a 10 :b {:x 10 :y 20}})

;; 410767028
;; 410767028

;; {:a {:x 100}
;;  :b {:x 666}
;;  :c {:x 300}}


(def small-dict {:x 100})
(def medium-dict {:x 100
                  :a 0
                  :b 0
                  :c 0
                  :d 0
                  :e 0
                  :f 0
                  :g 0
                  :h 0
                  :i 0
                  :j 0
                  :k 0
                  :l 0
                  :m 0
                  :n 0
                  :o 0
                  :p 0
                  :q 0
                  :r 0
                  :s 0
                  :t 0})
(def large-dict {:aa :ab :ac :ad :ae :af :ag :ah :ai :aj :ak :al :am :an :ao :ap :aq :ar :as :at :au :av :aw :ax :ay :az
                 :ba :bb :bc :bd :be :bf :bg :bh :bi :bj :bk :bl :bm :bn :bo :bp :bq :br :bs :bt :bu :bv :bw :bx :by :bz
                 :x 100
                 :ca :cb :cc :cd :ce :cf :cg :ch :ci :cj :ck :cl :cm :cn :co :cp :cq :cr :cs :ct :cu :cv :cw :cx :cy :cz
                 :da :db :dc :dd :de :df :dg :dh :di :dj :dk :dl :dm :dn :do :dp :dq :dr :ds :dt :du :dv :dw :dx :dy :dz
                 })


(defn try-lookup [n d]
  (for (i 0 n)
    (assert-eq 100 (get d :x))))

(time (try-lookup 10000 small-dict))
(time (try-lookup 10000 medium-dict))
(time (try-lookup 10000 large-dict))

(time (try-lookup 10000 small-dict))
(time (try-lookup 10000 medium-dict))
(time (try-lookup 10000 large-dict))
