;;(reset! echo-signature-after-bake true)
;;(reset! log-unloading-of-dylibs true)
;;(reset! profile-infer-time true)
;;(reset! profile-external-compiler-time true)
;;(reset! log-deps-when-baking-ast true)
;;(reset! log-redefining-struct true)

;; (def fib (fn [x]
;;            (if (< x 2)
;;              1
;;              (+ (fib (- x 2))
;;                 (fib (- x 1))))))

;; (def d1 {:a {}
;;          :b {:a 1
;;              :b 2
;;              :c 3}
;;          :c {:a {:x 100}
;;              :b {:x 200}
;;              :c {:x 300}}})

;; (def d2 {:a {}
;;          :b {:a 1
;;              :b 2
;;              :c 3}
;;          :c {:a {:x 100}
;;              :b {:x 66666}
;;              :c {:x 300}}})

;; (def d3 {:a {}
;;          :b {:a 1
;;              :b 2
;;              :c 3}
;;          :c {:a {:x 100}
;;              :b {:x 200}
;;              :c {:x 300}}})

;; (defn compare []
;;   (do
;;     (assert (not (= d1 d2)))
;;     (assert (= d1 d3))))

;;(time (for (i 0 50000) (compare))) ;; takes 4700 ms

;; (println (str "meta d1: " (meta d1)))
;; (println (str "meta d2: " (meta d2)))
;; (println (str "meta d3: " (meta d3)))

;;(meta {:a 10 :b {:x 10 :y 20}})

;; 410767028
;; 410767028

;; {:a {:x 100}
;;  :b {:x 666}
;;  :c {:x 300}}


(def small-dict {:x 100})
(def medium-dict {:x 100
                  :a 0
                  :b 0
                  :c 0
                  :d 0
                  :e 0
                  :f 0
                  :g 0
                  :h 0
                  :i 0
                  :j 0
                  :k 0
                  :l 0
                  :m 0
                  :n 0
                  :o 0
                  :p 0
                  :q 0
                  :r 0
                  :s 0
                  :t 0})
(def large-dict {:aa 0 :ab 0 :ac 0 :ad 0 :ae 0 :af 0 :ag 0 :ah 0 :ai 0 :aj 0 :ak 0 :al 0 :am 0
                 :an 0 :ao 0 :ap 0 :aq 0 :ar 0 :as 0 :at 0 :au 0 :av 0 :aw 0 :ax 0 :ay 0 :az 0
                 :x 100
                 :ca 0 :cc 0 :cd 0 :ce 0 :cf 0 :cg 0 :ch 0 :ci 0 :cj 0 :ck 0 :cl 0 :cm 0 :cn 0
                 :co 0 :cp 0 :cq 0 :cr 0 :cs 0 :ct 0 :cu 0 :cv 0 :cw 0 :cx 0 :cy 0 :cz 0 :cq 0
                 :da 0 :db 0 :dc 0 :dd 0 :de 0 :df 0 :dg 0 :dh 0 :di 0 :dj 0 :dk 0 :dl 0 :dm 0
                 :dn 0 :do 0 :dp 0 :dq 0 :dr 0 :ds 0 :dt 0 :du 0 :dv 0 :dw 0 :dx 0 :dy 0 :dz 0
                 })

(defn try-lookup [n d]
  (for (i 0 n)
    (assert-eq 100 (:x d))))

;; (if (not (= 100 (:x d)))
;;       (error "fail")
;;       nil)

;; (time (try-lookup 10000 small-dict))
;; (time (try-lookup 10000 medium-dict))
;; (time (try-lookup 10000 large-dict))

;; (time (try-lookup 10000 small-dict))
;; (time (try-lookup 10000 medium-dict))
;; (time (try-lookup 10000 large-dict))

;; (load-lisp "../lisp/test_printing.carp")
;; (load-lisp (str carp-dir "lisp/test_stack_trace.carp"))
;; (load-lisp (str carp-dir "lisp/test_line_numbers.carp"))
