(reset! echo-signature-after-bake true)
(reset! log-unloading-of-dylibs true)
;;(reset! profile-infer-time true)
;;(reset! profile-external-compiler-time true)
;;(reset! log-deps-when-baking-ast true)


;; (defn f [s]
;;   (if (= s "hej")
;;     @"Hello!"
;;     @"What..?"))

;; (defn g []
;;   (println (ref (f "hej"))))



;;^ann '(:fn ((:ref :int) (:ref :int)) :int)
(defn add [a b]
  (+ a b))

(bake add)

(defn r1 []
  (reduce add 0 &[1 2 3 4 5]))

(def rasta (lambda-to-ast (code r1)))
(def rcon (gencon rasta))
;;(def solution (solve-constraints rcon))

;; (defstruct Bleh [bleh-x :int])

;; (defn add-bleh [b1 b2]
;;   (Bleh (+ (get-bleh-x b1)
;;            (get-bleh-x b2))))

;; (defn r2 []
;;   (reduce add-bleh (Bleh 0) &[(Bleh 10) (Bleh 20) (Bleh 30)]))



(def x {"t27" '(:ref "t26"), 
        "t26" '(:ref "t26"), 
        "t13" '(:ref (:Array (:ref "t26"))), 
        "t12" '(:ref "t26"), 
        "t11" '(:fn ((:ref (:ref "t26")) (:ref (:ref "t26"))) (:ref "t26")), 
        "t28" '(:ref (:ref "t26")), 
        "t15" '(:fn ((:ref (:ref "t26")) (:ref (:ref "t26"))) (:ref (:ref "t26"))), 
        "t14" '(:ref "t26"), 
        "t17" :int, 
        "t16" '(:Array :int), 
        "t9" '(:ref "t26"), 
        "t8" '(:ref "t26")})

(def y {"t27" '(:ref "t26"), 
        "t26" '(:ref "t26"), 
        "t13" '(:ref (:Array (:ref "t26"))), 
        "t12" '(:ref "t26"), 
        "t11" '(:fn ((:ref (:ref "t26")) (:ref (:ref "t26"))) (:ref "t26")), 
        "t28" '(:ref (:ref "t26")), 
        "t15" '(:fn ((:ref (:ref "t26")) (:ref (:ref "t26"))) (:ref (:ref "t26"))), 
        "t14" '(:ref "t26"), 
        "t17" :int, 
        "t16" '(:Array :int), 
        "t9" '(:ref "t26"), 
        "t8" '(:ref "t26")})


(def z {"t28" "t28", 
        "t15" '(:fn ("t28" "t28") "t28"), 
        "t14" "t14", 
        "t17" :int, 
        "t16" '(:Array :int), 
        "t9" "t14", 
        "t8" "t14"})
