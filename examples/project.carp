;;(reset! echo-signature-after-bake true)
;;(reset! log-unloading-of-dylibs true)
;;(reset! profile-infer-time true)
;;(reset! profile-external-compiler-time true)
;;(reset! log-deps-when-baking-ast true)
;;(reset! log-redefining-struct true)

(def fib (fn [x]
           (if (< x 2)
             1
             (+ (fib (- x 2))
                (fib (- x 1))))))

(def d1 {:a {}
         :b {:a 1
             :b 2
             :c 3}
         :c {:a {:x 100}
             :b {:x 200}
             :c {:x 300}}})

(def d2 {:a {}
         :b {:a 1
             :b 2
             :c 3}
         :c {:a {:x 100}
             :b {:x 66666}
             :c {:x 300}}})

(def d3 {:a {}
         :b {:a 1
             :b 2
             :c 3}
         :c {:a {:x 100}
             :b {:x 200}
             :c {:x 300}}})

(defn compare []
  (do
    (assert (not (= d1 d2)))
    (assert (= d1 d3))))

;;(time (for (i 0 50000) (compare))) ;; takes 4700 ms

;; (println (str "meta d1: " (meta d1)))
;; (println (str "meta d2: " (meta d2)))
;; (println (str "meta d3: " (meta d3)))

;;(meta {:a 10 :b {:x 10 :y 20}})

;; 410767028
;; 410767028

;; {:a {:x 100}
;;  :b {:x 666}
;;  :c {:x 300}}





;; (defn f [] (Blip-set-z (Blip true 123 @"yeah") @"hej"))
;; (bake f)

;; (def b1 (Blip true \g @"Yo"))
;; (def b2 (Blip true 123 @"Yo"))

;; (bake b1)
;; (bake b2)



;; (defstruct Pair [x "t" y "t"])

;; (def p1 (Pair 10 20))

;; (assert-eq 10 (Pair-get-x p1))
;; (assert-eq 20 (Pair-get-y p1))

;; (do (defstruct Something [a :int
;;                           b "B"
;;                           c "C"])
;;     (defn f [] (Something-get-c (Something 0 false @"hello")))
;;     (bake f)
;;     (assert-eq "hello" (f))
;;     )

(defstruct Blergh [x :int])

;; (def x [(Blergh 10) (Blergh 20)])

(defn x2 [x]
  (* x 2))

(defn double-blergh [b]
  (Blergh-update-x (copy b) x2))

;; (defn f [x]
;;   (map double-blergh x))

;;(f x)

(defn eat [x]
  (do (println* (ref (double-blergh x)))
      100))

(def x (Blergh 123))
;; (double-blergh x)

