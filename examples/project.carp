(reset! echo-signature-after-bake true)
(reset! log-unloading-of-dylibs true)







(import gl)

(defn draw []
  (draw-lines [(Vec2 0.0 0.0)
               (Vec2 0.1 0.3)
               (Vec2 0.2 0.4)
               (Vec2 -0.3 0.5)
               (Vec2 -0.5 0.4)
               (Vec2 -0.2 0.1)]))

(defn app []
  (glfw-app "CARP" draw default-on-keys))




(defn f []
  (let [a [(Vec2 0.0 0.0)
           (Vec2 0.1 0.1)]]
    (str (nth &a 1))))


























;; (defn h [a b]
;;   (+ (strlen a)
;;      (strlen b)))

;; (defn f []
;;   (h 3 "b"))

;; (defn g []
;;   (let [s (string-copy &"hej")]
;;     (f s)))

;;(bake g)

;; ^doc "Hej pÃ¥ dig"
;; ^ann '(:fn () :void)

;; (defn f [] "yeah")


;; (defn f []
;;   (let [a (fn [] (nth "erik"))
;;         b (fn [] (a))]
;;     (b)))

;; (defn aaa [x]
;;   (* x 10))

;; (defn bbb [f]
;;   (+ 1 (f 5)))

;; (bake bbb)

;; (println (str (bbb aaa)))

;; (defn servant [s]
;;   (string-append s "!"))

;; (defn master [f]
;;   (string-append (f "hje") "..."))

;; (bake master)

;; (println (master servant))


;;(when (not carp-dev) (load-lisp (str carp-dir "lisp/examples.carp")))
;;(defn tricky-let [] ((id id) 2))
