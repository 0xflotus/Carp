(reset! echo-signature-after-bake true)
(reset! log-unloading-of-dylibs true)
;;(reset! profile-infer-time true)
;;(reset! profile-external-compiler-time true)
;;(reset! log-deps-when-baking-ast true)
;;(reset! log-redefining-struct true)

;;(eb '(do (def x "yeah") (println x)))
;;(eb '(do (def f (fn [z] (* z z))) (f 3)))
;;(eb '(map (fn [x] (* x x)) (list 1 2 3)))
;;(eb '(while true (println "loop")))
;;(eb '(while true false))

;;(eb '(do (def t 0) (while (< t 10) (do (println (str t)) (reset! t (inc t))))))

;;(eb '(if true 10 20))

;; (eb '(do (def MAP (fn [f xs]
;;                     (let [i 0
;;                           result (copy xs)]
;;                       (do
;;                         (while (< i (count xs))
;;                           (do (array-set! result i (f (nth xs i)))
;;                               (reset! i (inc i))))
;;                         result))))
;;          (MAP inc (array 1 2 3))))

;;(eb '(def fi (macro [a b c] (list 'if a c b))))
;; (eb '(fi true 10 20))

;;(eb '(def recur (fn [] (do (println (str 123)) (recur)))))
;;(eb '(recur))

(eb '(def or (macro [a b]
                    (list 'if a a b))))
(eb '(or false 10))
