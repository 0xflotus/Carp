(use Maybe)

;; ;; - Generic types -
(defn generic-sumtypes [s]
  (match s
    (Maybe.Nothing) @"Nada"
    (Maybe.Just x)  (str* "Something like " (str x))
    ))

;; A more convenient syntax when doing C-style enums
(deftype Grade (A []) (B []) (C []))

(defn grade-value [g]
  (match (the Grade g)
    A 20
    B 15
    C 10))

;; Variable shadowing inside match
(defn confusion [x]
  (match x
    (Maybe.Just x) x
    (Maybe.Nothing) @"Nope"))

;; Recursive sumtype
;; (deftype JSON
;;   (Str [String])
;;   (Num [Double])
;;   (Arr [(Array JSON)])
;;   (Obj [(Map String JSON)]))

(defn main []
  (do
    (println* (generic-sumtypes (Maybe.Just 123)))
    (println* (generic-sumtypes (the (Maybe Int) (Maybe.Nothing))))
    (println* "Grade.B has value " (grade-value (Grade.B)))
    (println* (confusion (Just @"Yo")))))
