;; (use IO)
(use Int)
(use Float)
;; (use Double)
;; (use Array)
;; (use System)
;; (use String)
;; (use Char)
;; (use Bool)

;;; Ranges of non-numbers (bug)
;;(defn main [] (IO.println &(Array.str &(Array.range @"hej" @"svej" @"a"))))

;;; Interfaces
;; (defn f [a b]
;;   (= @(Array.nth a 0) @(Array.nth b 0)))

;; (defn main []
;;   (IO.println &(Bool.str (f &[1 2 3] &[1 10 100]))))

;;; Creating typedefs in all cases

;; (defn g [x y]
;;   (+ @x @y))

;; (defn f [xs]
;;   (Array.element-count &xs 123))

(defn f [x] (Int.str @x))

(defn main []
  (let [xs [1 -2 -3 4 -5]
        ys (Array.copy-map f &xs)]
    (IO.println &(Array.str &ys))))
