;;(Debug.sanitize-addresses)
(Project.config "print-ast" true)

(deftype (Maybe a)
  (Just [a])
  (Nothing []))

;;(deftype Flip (A [String]) (B [Float]))

;; (defn f []
;;   (Flip.A 123))

;; (defn g []
;;   (Flip.B true 5.0f))

;; (defn m []
;;   (Maybe.Just 123))

;; (defn n []
;;   (the (Maybe Int) (Maybe.Nothing)))

;; (defn main []
;;   (let-do [x (Maybe.Just 100)
;;            ;;y (the (Maybe Int) (Maybe.Nothing))
;;            ]
;;     (match x
;;       ;;(Just a) (println* a)
;;       (Maybe.Just a) (println* "a?")
;;       (Maybe.Nothing) (println* "Nada!")
;;       )))

(deftype Switch
  (Aha [Int])
  (Boo [Bool]))

;; - The easy case -
(defn main []
  (match (Switch.Boo false)
    (Switch.Aha x) (println* &(Int.str x))
    (Switch.Boo b) (println* &(Bool.str b))))

;; - More tricky -
;; (defn f [s]
;;   (match s
;;     (Switch.Aha x) (IO.println &(Int.str x))
;;     (Switch.Boo b) (IO.println &(Bool.str b))))

;; (defn-do main []
;;   (println* &(f (Switch.Aha 123)))
;;   (println* &(f (Switch.Boo true)))
;;   (println* &(f (Switch.Boo false))))
