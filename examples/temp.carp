;; (Debug.sanitize-addresses)
;; (Project.config "print-ast" true)

;; (defn main []
;;   (let [lam (fn [x] (let [gah (fn [] 3.3f)]
;;                       (* 10 x)))]
;;     (println* (+ (lam 3) (lam 4)))))

;; (defn f [y]
;;   (fn [x] (Int.+ x y)))



;; (def global-variable 10000)

;; (defn f [capture-me]
;;   (let [and-me 1000]
;;     (fn [not-me]
;;       (let [nor-me 100]
;;         (+ (+ (+ (+ global-variable capture-me) and-me) not-me) nor-me)))))

;; (defn-do main []
;;   (let [g (f 10)]
;;     (println* (g 1))))

;; (use Array)

;; (defn pow-to [exponent]
;;   (endo-map (fn [x] (Int.pow x exponent)) (range 0 10 1)))

;; (defn main []
;;   (println* (ref (pow-to 3))))

(deftype Blah [function (Fn [] ())])

(defn hej [] (println* "hej"))

(defn main []
  (let [b (Blah.init hej)
        f @(Blah.function &b)]
    (f)))
