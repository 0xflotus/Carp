;; (Debug.sanitize-addresses)
;; (Project.config "print-ast" true)

;; (defn main []
;;   (let [lam (fn [x] (let [gah (fn [] 3.3f)]
;;                       (* 10 x)))]
;;     (println* (+ (lam 3) (lam 4)))))

;; (defn f [y]
;;   (fn [x] (Int.+ x y)))



;; (def global-variable 10000)

;; (defn f [capture-me]
;;   (let [and-me 1000]
;;     (fn [not-me]
;;       (let [nor-me 100]
;;         (+ (+ (+ (+ global-variable capture-me) and-me) not-me) nor-me)))))

;; (defn-do main []
;;   (let [g (f 10)]
;;     (println* (g 1))))



;; (use Array)

;; (defn pow-to [exponent to]
;;   (let [fff (fn [] ())
;;         ff2 @&fff
;;         to-copy @to
;;         upper (to-copy)]
;;     (endo-map (fn [x] (Int.pow x exponent)) (range 0 upper 1))))

;; (defn twenty [] 20)

;; (defn main []
;;   (println* (ref (pow-to 3 &twenty))))



;; (deftype Blah [function (Fn [] ())])

;; (defn hej [] (println* "hej"))

;; (defn main []
;;   (let [b (Blah.init hej)
;;         f @(Blah.function &b)]
;;     (f)))



;; (defn main []
;;   (let [x 100
;;         y 23
;;         f (fn [] (+ x y))
;;         ignore-me (fn [] ())]
;;     (f)))


;; (defn main []
;;   (let [strings [@"a" @"bb" @"ccc"]]
;;     (println* &(Array.copy-map String.length &strings))))


(defn blah-1 []
  (let [s @"hello"
        f (fn [] s)]
    (println* (f))))

(defn-do main []
  (Debug.log-memory-balance! true)
  (Debug.assert-balanced
   (blah-1)))
