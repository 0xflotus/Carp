;;(Debug.sanitize-addresses)
(Project.config "print-ast" true)

; (deftype JSON
;   (Str [String])
;   (Num [Double])
;   (Arr [(Array JSON)])
;   (Obj [(Map String JSON)]))

;; Refs in structs
;; (deftype (Aha a) [x a])
;; (def b (Aha.init "bleh"))

;; Refs in sumtypes
;;(def x (Maybe.Just "Heya"))

;; (defn f []
;;   (match x
;;     (Maybe.Just a)  a
;;     (Maybe.Nothing) 0))



;; (deftype Thing [x Int])

;; ;; lifetimes : (Fn [(Ref Thing q)] (Ref String q))
;; (defn lifetimes [thing]
;;   (Thing.x thing))

;; (defn main []
;;   (let [t (Thing.init 12345)
;;         s-ref (lifetimes &t)] ;; &t : (Ref Thing main_let_scope_0), s-ref : (Ref String main_let_scope_0)
;;     (do (delete t)
;;         (IO.println s-ref)) ;; Should detect that the s-ref is invalid here
;;     ()))

;; (load "Macros.carp")
;; (load "Int.carp")
;; (load "Interfaces.carp")
;; (load "String.carp")

;; The most basic use of lifetimes:
;; (defn main []
;;   (let [s @"Yo"
;;         r &s]
;;     (do
;;       (String.delete s)
;;       (IO.println r))
;;     ))

;; (defn f []
;;   (let [xs [1 2 3]
;;         r &xs
;;         r2 r]
;;     (do
;;       ;;(Array.delete xs)
;;       (Array.aset! r2 0 1000))))

;; (defn eat [s]
;;   ())

;; (defn g [xs x]
;;   (do
;;     ;;(eat xs)
;;     (Array.aset! xs 0 x)
;;     ))

(deftype Q [x String])

(defmodule Q
  (defn = [a b]
    (String.= (Q.x a) (Q.x b))))
