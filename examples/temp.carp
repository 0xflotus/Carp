;;(Debug.sanitize-addresses)
(Project.config "print-ast" true)

; (deftype JSON
;   (Str [String])
;   (Num [Double])
;   (Arr [(Array JSON)])
;   (Obj [(Map String JSON)]))

;; Refs in structs
;; (deftype (Aha a) [x a])
;; (def b (Aha.init "bleh"))

;; Refs in sumtypes
;;(def x (Maybe.Just "Heya"))

;; (defn f []
;;   (match x
;;     (Maybe.Just a)  a
;;     (Maybe.Nothing) 0))

(deftype Thing [x Int])

;; lifetimes : (Fn [(Ref Thing)] (Ref String))
(defn lifetimes [thing]
  (Thing.x thing))

(defn main []
  (let [t (Thing.init 12345)
        s-ref (lifetimes &t)]
    ))
