;; A dynamic font
(import gl)

(def gstate 65)

(defn mid-x [] 256f)
(defn mid-y [] 256f)

(defn em [] 100f)

(defn point-for-id [i]
  (copy
   (nth
    (ref [(Vec2 (mid-x) (mid-y))
          (Vec2 (- (mid-x) (em)) (- (mid-y) (em)))
          (Vec2 (+ (mid-x) (em)) (- (mid-y) (em)))
          (Vec2 (- (mid-x) (em)) (+ (mid-y) (em)))
          (Vec2 (+ (mid-x) (em)) (+ (mid-y) (em)))])
    i)))

(defstruct TypografGlyph
  [point-ids (:Array :int)])

(defn glyph-0 [] (TypografGlyph [0 1 3 4]))

(defn int->glyph [x]
  (let [glyphs [(glyph-0)]
        i (- x 65)]
    (if (< i (count &glyphs))
      (copy (nth &glyphs i))
      (glyph-0))))

(defn draw-glyph [glyph]
  (let [ids (get-point-ids glyph)
        points [(Vec2 100f 100f) (Vec2 250f 150f) (Vec2 300f 300f)]]
    (draw-lines &points)))

(defn draw [whatever]
  (let [glyph (int->glyph gstate)]
    (do
      (glColor3f 0.4f 0.4f 0.4f)
      ;;(draw-lines [(Vec2 100.1f 100.1f) (Vec2 100.3f 300.2f) (Vec2 200.5f 100.5f)])
      (draw-line 0f 256f 512f 256f)
      (glColor3f 1f 1f 1f)
      (draw-glyph &glyph))))

^ann glfw-key-callback-type
(defn on-keys [window key scancode action mods]
  (if (= key-esc key)
    (glfwSetWindowShouldClose window true)
    (reset! gstate key)))

(defn setup []
  (do (glOrtho 0.0 512.0 512.0 0.0 1.0 -1.0) 0))

(defn typograf []
  (glfw-app "Typograf" setup id draw on-keys))

(bake-exe typograf)
;;(typograf)
