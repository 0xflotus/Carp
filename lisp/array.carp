
;; The generic, built in array.

;; Basic idea is to:

;; 1. Give primops signatures
;; 2. Create primops for the generic functions like 'array-new', 'array-delete', 'array-set' & 'array-get'
;; 3. When baking calls to these functions, don't generate code like normal, instead go to a special code generating function
;; 4. This function pastes in a blob of C that can use the type signature of the call to figure out special cases

;; Example
;; array-get has the type ((:array "a") :int) -> "a"
;; Another function calls it like this:
;;  (array-get [1 2 3] 0)
;; The type of the call becomes ((:array :int) :int)
;; When calling the special codegen function it gets access to all the types in the call
;; It sticks them into a predefined block of C:
;; TYPE_A array-get--TYPE_A(Array--TYPE_A array, int index) {
;;   return array[index];
;; }

