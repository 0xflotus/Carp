;; Anatomy of AST nodes
;; { :node = The kind of node this is. Can be :function / :arg / :literal / :app (function application) / :binop
;;   :type = The type that has been calculated for this node.
;;   :name = Used by AST nodes where this makes sense. The name of a variable or function, etc.
;; }

;; Anatomy of a type
;; Before the type is known it is set to a typevar which is a string of the form "t0", "t1", etc
;; Types can be just a keyword like :int / :string
;; Complex types are lists, like the :fn type (:fn (:int :int) :string) which corresponds to (Int, Int) -> String

(def typevar-counter 0)

(defn gen-typevar []
  (let [typevar (str "t" typevar-counter)]
    (do (swap! typevar-counter inc)
        typevar)))

(defn arg-list-to-ast [args]
  (map (fn (arg)
         {:node :arg
          :name arg
          :type (gen-typevar)})
       args))

(defn binop? [form]
  (match form
         (x ... _) (contains? '(+ - * / <) x)
         _ false))

(defn gen-fn-type [arg-count]
  (list :fn (repeatedly gen-typevar arg-count) (gen-typevar)))

(defn nest-calls-to-array-set [a index array-name-symbol]
  (match a
    [] (literal-or-lookup-to-ast array-name-symbol)
    [x ... xs]
    (do
      ;;(println (str "nest-calls-to-array-set x & xs: " x " & " xs))
      (let [array-set-signature (list :fn (list (list :Array (gen-typevar)) :int (gen-typevar)) (list :Array (gen-typevar)))]
        {:node :app
         :type (gen-typevar)
         :head (assoc (literal-or-lookup-to-ast 'array-set) :type array-set-signature)
         :tail (list (nest-calls-to-array-set xs (inc index) array-name-symbol) (literal-or-lookup-to-ast index) (form-to-ast x))}))))

(def array-to-ast-var-name-counters (copy {}))

(defn array-to-ast-OLD [a]
  (let [a-count (count a)
        array-name-symbol (symbol (gen-var-name array-to-ast-var-name-counters "array"))
        nested-calls (nest-calls-to-array-set a 0 array-name-symbol)
        ;; array-form (list 'let [array-name-symbol (list 'array-of-size a-count)]
        ;;                  nested-calls)
        ;;array-setup-ast (form-to-ast array-form)
        array-setup-ast {:node :let
                         :type (gen-typevar)
                         :bindings (list {:node :binding
                                          :type (gen-typevar)
                                          :name array-name-symbol
                                          :value (form-to-ast (list 'array-of-size a-count))})
                         :line (meta-get a :line)
                         :original-form a
                         :body nested-calls}
        ]
    (do
      ;;(println (str "\narray-setup-ast:\n" array-setup-ast))
      ;;(println (str "\narray-form:\n" array-form))
      array-setup-ast)))

(defn array-to-ast [a]
  {:node :array
   :type (list :Array (gen-typevar))
   :line (meta-get a :line)
   :original-form a
   :values (map form-to-ast (array-to-list a))})

(defn list-to-ast [l]
  (if (binop? l)
    (match l
           (op left right) {:node :binop
                     :type (gen-typevar)
                     :op op
                     :left (form-to-ast left)
                     :right (form-to-ast right)})
    (match l
           ('= left right) {:node :binop
                            :type :bool
                            :op '==
                            :left (form-to-ast left)
                            :right (form-to-ast right)}

           (x ... xs) (if (def? x)
                        (let [evaled (eval x)]
                          (if (and (symbol? x) (macro? evaled))
                            (expand-macro l)
                            (app-to-ast x xs l)))
                        (app-to-ast x xs l))
           
           nil {:node :literal :type :any :value ""})))

(defn app-to-ast [x xs original-form]
  (do ;;(println (str "app-to-ast: " x ", " xs))
      {:node :app
       :type (gen-typevar)
       :line (meta-get x :line)
       :original-form original-form
       :head (assoc (form-to-ast x) :type (gen-fn-type (count xs)))
       :tail (map2 (fn [form n] (assoc form :arg-index n)) (map form-to-ast xs) (range 0 (count xs)))}))

(defn expand-macro [form]
  (do ;;(println (str "expand:\n" form))
      (let [macro (code (eval (first form)))
            mlam (eval (list 'fn (nth macro 1) (nth macro 2))) ;; convert macro to lambda... this is a strange way to do it
            ;;_ (println (str "macro-lambda: " mlam ", type: " (type mlam)))
            args (rest form)
            ;;_ (println (str "args: " args))
            called-macro (apply mlam args)
            ;;called-macro-forms (eval called-macro)
            expanded-ast (form-to-ast called-macro)
            ;;_ (println (str "expanded-ast: " expanded-ast))
            ]
        ;;(println (str "called-macro:\n" called-macro ", type: " (type called-macro)))
        expanded-ast)))

(defn if-to-ast [expr if-true if-false]
  {:node :if
   :type (gen-typevar)
   :expr (form-to-ast expr)
   :original-form (list 'if expr if-true if-false)
   :line (meta-get expr :line)
   :if-true (form-to-ast if-true)
   :if-false (form-to-ast if-false)})

(defn do-to-ast [forms]
  {:node :do
   :type (gen-typevar)
   :forms (map form-to-ast forms)})

(defn bindings-to-ast [bindings]
  (match bindings
    [name value ... rest-bindings] (cons {:node :binding
                                          :type (gen-typevar)
                                          :name name
                                          :value (form-to-ast value)}
                                         (bindings-to-ast rest-bindings))
    _ ()))

(defn let-to-ast [bindings body]
  {:node :let
   :type (gen-typevar)
   :bindings (bindings-to-ast bindings)
   :body (form-to-ast body)
   :original-form (list 'let bindings body)
   :line (meta-get bindings :line)})

(defn while-to-ast [expr body]
  {:node :while
   :type :void
   :expr (form-to-ast expr)
   :body (form-to-ast body)
   :original-form (list 'while expr body)
   :line (meta-get expr :line)})

(defn ref-to-ast [expr]
  {:node :ref
   :type (list :ref (gen-typevar))
   :line (meta-get expr :line)
   :original-form expr
   :expr (form-to-ast expr)})

(defn reset-to-ast [symbol expr]
  (if (symbol? symbol)
    {:node :reset
     :type :void
     :symbol (literal-or-lookup-to-ast symbol)
     :expr (form-to-ast expr)
     :line (meta-get symbol :line)
     :original-form (list 'reset! symbol expr)}
    (error (str "Non-symbol '" symbol "' found in reset! form."))))

(defn literal-or-lookup-to-ast [expr]
  (if (symbol? expr)
    {:node :lookup
     :type (gen-typevar)
     :line (meta-get expr :line)
     :original-form expr
     :value expr} ;; change key to :name ..?
    {:node :literal
     :type (type-of-literal expr)
     :line (meta-get expr :line)
     :original-form (prn expr)
     :value expr}))

(defn type-of-literal [expr]
  (let [t (type expr)]
    (cond
      (= :string t) '(:ref :string) ; Literal strings are refs
      (= :ptr t) (gen-typevar)
      :else t)))

(defn is-struct-constructor? [form]
  (and (dict? form) (true? (get-maybe form :struct))))

(defn struct-constructor-ast [struct-description]
  (let [struct-name (:name struct-description)
        struct-type (keyword struct-name)
        arg-count (:member-count struct-description)]
    (do
      ;;(println (str "found struct constructor: ") struct-name)
      {:node :lookup
       :constructor true
       :type (list :fn (repeatedly gen-typevar arg-count) (keyword struct-name))
       :member-types (:member-types struct-description)
       :member-names (:member-names struct-description)
       :struct-name struct-name
       :value (str "new-" struct-name)})))

(defn form-to-ast [form]
  (match form
    
    ('if expr a b) (if-to-ast expr a b)
    ('if ... _) (error (str "'if' needs exactly two branches. Compiler got:\n" form))

    ('do ... forms) (do-to-ast forms)

    ('let bindings body) (let-to-ast bindings body)
    ('let ... _) (error (str "'let' needs exactly two inner forms, bindings and a body. Compiler got:\n" form))

    ('while expr body) (while-to-ast expr body)
    ('while ... _) (error (str "'while' needs exactly two inner forms, an expression and a body. Compiler got:\n" form))

    ('ref expr) (ref-to-ast expr)
    ('ref ... _) (error (str "'ref' needs exactly one inner form, an expression. Compiler got:\n" form))

    ('reset! symbol expr) (reset-to-ast symbol expr)
    ('reset! ... _) (error (str "'reset' needs exactly two inner form, a symbol and an expression. Compiler got:\n" form))
    
    ('include-c-code s) {:node :c-code :code s :type (gen-typevar)}
    'NULL {:node :null :type (gen-typevar)}
    'true {:node :literal :type :bool :value 1}
    'false {:node :literal :type :bool :value 0}
    x (if (list? x)
        (list-to-ast x)
        (if (array? x)
          (array-to-ast x)
          (if (and (symbol? x) (def? x) (is-struct-constructor? (eval x))) ;; (log (str "def? : " (type x) " ") x)
            (struct-constructor-ast (eval x))
            (literal-or-lookup-to-ast x))))))

(defn body-to-ast [body]
  (form-to-ast body))

;; Takes a list representation of a lambda and creates an AST from it
(defn lambda-to-ast [form]
  (do (assert-eq :list (type form))
      (match form
             ('fn args body) {:node :function
                              :type (gen-fn-type (count args))
                              :annotation nil
                              :args (arg-list-to-ast (if (array? args) (array-to-list args) args))
                              :body (body-to-ast body)}
             _ (error (str "Failed to match lambda form: " form)))))
