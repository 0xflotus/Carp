(tester/set-suite! "baking")

(deftest test-fib
  (do
    (defn fib (n)
      (if (< n 2)
        1
        (+ (fib (- n 2)) (fib (- n 1)))))
    (bake fib)
    (assert-eq (fib 6) 13)
    (assert-eq (type fib) :foreign)
    :fib-is-ok))

(deftest test-hypo
  (do (defn hypo [x y]
        (sqrtf (+ (* x x) (* y y))))
      (bake hypo)
      (assert-approx-eq (hypo 3.0f 4.0f) 5.0f)
      (assert-eq (type hypo) :foreign)
      :hypo-is-ok))

(deftest test-loading
  (do
    (save (str carp-dir "out/out.c") "int f() { return 100; }")
    (system (str "clang -shared -o " carp-dir "out/f.so " carp-dir "out/out.c"))
    (def flib (load-dylib (str carp-dir "out/f.so")))
    (register flib "f" () :int)
    (assert-eq 100 (f))
    
    (save (str carp-dir "out/out.c") "int g() { return 150; }")
    (system (str "clang -shared -o " carp-dir "out/g.so " carp-dir "out/out.c"))
    (def glib (load-dylib (str carp-dir "out/g.so")))
    (register glib "g" () :int)
    (assert-eq 150 (g))
    
    (unload-dylib flib)
    
    (save (str carp-dir "out/out.c") "int f() { return 200; }")
    (system (str "clang -shared -o " carp-dir "out/f.so " carp-dir "out/out.c"))
    (def flib (load-dylib (str carp-dir "out/f.so")))
    (register flib "f" () :int)
    (assert-eq 200 (f))
    ))

;; This does NOT work!
(defn shadow (x)
  (let [x (* x 3)]
    x))
;; (def shadowast (lambda-to-ast (code shadow)))
;; (def shadowcon (gencon shadowast))
;; (def shadowasta (annotate-ast shadowast))



(defn non-baked (x) (* x 10))
(defn deps-1 () (non-baked 3))

(def deps-1-ast (lambda-to-ast (code deps-1)))
(def deps-1-deps (find-func-deps deps-1-ast true))
(def deps-1-con (gencon deps-1-ast))
(def deps-1-asta (annotate-ast deps-1-ast))


;; Auto chain bake
(deftest test-auto-chain-bake-1
  (do
    (defn f1 () 100)
    (defn f2 () 200)
    (defn f3 () (+ (f1) (f2)))
    (bake f3)
    (assert-eq (f3) 300)))
(test-auto-chain-bake-1)


(deftest test-auto-chain-bake-2
  (do
    (defn f4 () 100)
    (defn f5 (x) (+ x 1))
    (defn f6 () (let [z (f5 (f4))]
                   z))
    (bake f6)
    (assert-eq (f6) 101)))
(test-auto-chain-bake-2)




(deftest test-unloading-depending-functions
  (do
    (defn f7 [] 100)
    (bake f7)
    (assert-eq 100 (f7))

    (defn f8 [] (f7))
    (bake f8)
    (assert-eq 100 (f8))

    (defn f9 [] (f7))
    (bake f9)
    (assert-eq 100 (f9))

    (defn f10 [] (f9))
    (bake f10)
    (assert-eq 100 (f10))

    (defn f7 [] 200)
    (bake f7)

    (assert-eq 200 (f7))
    (assert-eq 200 (f8))
    (assert-eq 200 (f9))
    (assert-eq 200 (f10))
    ))

(test-unloading-depending-functions)



;; COMPILE TIME MACROS
(defn macro-1 ()
  (if-not true
    10
    20))

(deftest test-macro-1
  (do (bake macro-1)
      (assert-eq (macro-1) 20)))


;; RESET
(defn reset-1 ()
  (let [x 0]
    (do (reset! x 123)
        x)))

(deftest test-reset-1
  (do (bake reset-1)
      (assert-eq (reset-1) 123)))

;; (def reset-1-ast (lambda-to-ast (code reset-1)))
;; (def reset-1-deps (find-func-deps reset-1-ast false))
;; (def reset-1-con (gencon reset-1-ast))
;; (def reset-1-asta (annotate-ast reset-1-ast))


;; LET BINDINGS
(defn recursive-let ()
  (let [;; The other definition order should get caught by compiler, not clang:
        y "whaaaaaaat"
        x (string-append "hej" (ref (itos (strlen y))))
        ]
    x))

(bake recursive-let)



;; FUNCTION POINTERS

(defn call-twice (f)
  (do (strlen (ref (f))) (f)))

(def twice-ast (lambda-to-ast (code call-twice)))
(def twice-deps (find-func-deps twice-ast false))
(def twice-con (gencon twice-ast))
(def twice-asta (annotate-ast twice-ast))

(defn call-me ()
  (string-copy "CARP!"))

(deftest test-call-twice
  (do (bake call-twice)
      (bake call-me)
      (assert-eq "CARP!" (call-twice call-me))))



;; CHARS

(defn gimme-char ()
  \e)



;; PIPE MACROS

(defn baking-of-pipe-last-macro []
  (->> [10 20 30]
       (map inc)))

(deftest test-baking-of-pipe-last-macro
  (do (bake baking-of-pipe-last-macro)
      (assert-eq "[11 21 31]" (str (baking-of-pipe-last-macro)))))


(defn baking-of-pipe-first-macro []
  (-> 10
      (- 2)
      (* 2)))

(deftest test-baking-of-pipe-first-macro
  (do (bake baking-of-pipe-first-macro)
      (assert-eq 16 (baking-of-pipe-first-macro))))



;; Global variables

(deftest test-global-variables
  (do
    (defstruct Foo [foox :int])

    (def f (Foo 100))

    (defn del1 []
      (do
        (reset! f (Foo 200))
        (println (ref (str &f)))
        (reset! f (Foo 300))
        (println (ref (str &f)))
        ))

    (def g [1 2 3])

    (defn del2 []
      (do
        (reset! g [4 5 6])
        (println (ref (str &g)))
        (reset! g [7 8 9])
        (println (ref (str &g)))
        ))

    (def h @"hej")

    (defn del3 []
      (do
        (reset! h @"svej")
        (println (ref h))
        (reset! h @"nej")
        (println (ref h))
        ))))


;; setting global vars in main() for exe:s

(def x 10)
(def y [1 2 3])

(defn f []
  (do
    (println* x)
    (println* &y)))

;; (bake-exe f)



;; Must use refs in while loops, this should not compile:
(defn fool-while []
  (let [x @"yeah"]
    (while true
      (reset! x (id x)))
    ))

;;(assert-eq error-given-away (:error (catch-error (bake fool-while))))






;; Baking of groups
(def example-descriptor-1 {:src "int f() { return 42; }"
                           :proto "int f();"
                           :name "f"
                           :sig '(:fn () :int)})

(def example-descriptor-2 {:src "int g() { return f() + f(); }"
                           :proto "int g();"
                           :name "g"
                           :sig '(:fn () :int)})

(defn h [] (f))

(deftest test-bake-group
  (do
    (compiler/bake-group "efgroup" (list example-descriptor-1 example-descriptor-2) ())
    (bake h)))

(deftest test-global-with-array-of-structs
  (do
    (defstruct A [])
    (def some-a [(A) (A) (A)])
    (defn use-some-a []
      (println* &some-a))
    (bake use-some-a)))

(tester/run-suite "baking")
