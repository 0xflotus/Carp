
(defn convert-param-node (a)
  {:name (str (:name a))
   :type (:type a)})

(defn managed-type? (t)
  (match t
         (:ref x) false ;; (managed-type? x)
         _ (= t :string)))

(defn manage? (descriptor)
  (managed-type? (:type descriptor)))

(defn dont-free-result-variable (ast vars)
  (let [result-var-name (get-maybe ast :result-name)]
    (do
      ;;(println (str "result-var-name: " result-var-name))
      (if (= nil result-var-name)
        vars
        (remove (fn (v) (= (:name v) result-var-name)) vars)))))

(defn ref? (v)
  (match v
         (:ref _) true
         _ false))

(defn remove-var-with-name (vars name)
  (remove (fn (v) (and
                   (not (ref? (:type v)))
                   (= name (:name v)))) vars))

;; Used for reducing over the args in a function application
(defn calc-lifetime-for-arg (data arg-ast)
  (do
    ;; (println "CALCARG. data:\n")
    ;; (println data)
    ;; (println "arg-ast:\n")
    ;; (println arg-ast)
    (let [ast (:ast data)
          vars (:vars data)
          pos (:pos data)
          new-data (if (and (= :literal (:node arg-ast)) (not (ref? arg-ast)))
                     {:ast arg-ast :vars vars} ;; a literal as an arg to a non-ref parameter doesn't create any new vars to free
                     (calculate-lifetimes-internal {:ast arg-ast :vars vars}))
          new-arg-ast (:ast new-data)
          new-vars (:vars new-data)
          ;;_ (println (str "AST: " ast))
          new-app-data {:ast (assoc-in ast (list :tail pos) new-arg-ast)
                        :vars new-vars
                        :pos (inc pos)}]
      new-app-data)))

(defn calculate-lifetimes-internal (data)
  (do
    ;;(println (str "CALC:\n" data))
    (let [ast (:ast data)
          vars (:vars data)]
      (match (:node ast)

             :function (let [parameter-nodes (:args ast)
                             new-variables (filter manage? (map convert-param-node parameter-nodes))
                             ;;_ (println (str ":function new-variables: " new-variables))
                             data-after (calculate-lifetimes-internal {:ast (:body ast) :vars new-variables})
                             vars-after (:vars data-after)
                             vars-with-return-value-removed (dont-free-result-variable (:body ast) vars-after)]
                         {:ast (assoc ast :free vars-with-return-value-removed)
                          :vars '()})

             :literal {:ast ast
                       :vars (cons {:name (:result-name ast) :type (:type ast)} vars)}

             :ref (let [data-after (calculate-lifetimes-internal {:ast (:expr ast) :vars vars})]
                    data-after)

             :lookup (let [vars-after (remove-var-with-name vars (str (:value ast)))]
                       {:ast ast
                        :vars vars-after})

             :app (let [tail (:tail ast)
                        init-data (assoc data :pos 0)
                        data-after (reduce calc-lifetime-for-arg init-data tail)
                        vars-after (:vars data-after)
                        ast-after (:ast data-after)]
                    (do
                      ;;(println (str "APP VARS AFTER\n" vars-after))
                      {:ast ast-after
                       :vars vars-after}))
             
             _ data))))

(defn calculate-lifetimes (ast)
  (:ast (calculate-lifetimes-internal {:ast ast
                                       :vars '()})))

