(defn pretty-signature (t)
  (match t
    (:fn args ret) (str "(" (join ", " (map pretty-signature args)) ") -> " (pretty-signature ret))
    (:ref r) (str "&" (pretty-signature r) "")
    (:Array a) (str "Array " (pretty-signature a))
    x (if (keyword? t)
        (name t)
        (if (string? t)
          t
          (error (str "Can't prettify type signature: " t))))))

(defn generic-type? [t]
  (match (type t)
    :string true
    :keyword false
    :list (any true? (map generic-type? t))
    x (error (str "Invalid type in 'generic-type?': " (prn x)))))

(defn generic-function? [ast]
  (match (:type ast)
    (:fn arg-types ret-type) (or (any generic-type? arg-types) (generic-type? ret-type))
    x (error (str "Can't match " x " in generic-function?"))))

(defn c-ify-name (lisp-name)
  (let [x0 (str-replace lisp-name "-" "_")
        x1 (str-replace x0 "?" "QMARK")
        x2 (str-replace x1 "!" "BANG")
        x3 (str-replace x2 "*" "PTR")
        x4 (str-replace x3 "<" "LT")
        x5 (str-replace x4 ">" "GT")
        x6 (str-replace x5 "=" "EQ")]
    x6))
