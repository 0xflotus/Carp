
(def defmacro (macro (name args body) (list 'def name (list 'macro args body))))

(defmacro when (expr a) (list 'if expr a nil))
(defmacro if-not (expr a b) (list 'if (list 'not expr) a b))
(defmacro comment (form) nil)

(defmacro assert-eq (a b)
  (list 'if-not (list '= a b)
	(list 'error (list 'str "assert-eq fail:\n" (str a) " \n=>\n " a "\n\n - VS - \n\n" (str b) " \n=>\n " b))
	nil))

(defmacro assert-error (error-code form)
  (list 'let (list 'result (list 'catch-error form))
        (list 'if (list 'nil? 'result)
              (list 'error (list 'str "No error! " (str form)))
              (list 'if-not (list '= error-code (list :error 'result))
                    (list 'error (list 'str "assert-error fail:\n" (str form) " \n=>\n " form "\n Error: ???"))
                    nil))))

(defmacro defn (name args body)
  (list 'def name (list 'fn args body)))

(defn assert-approx-eq (target x)
  (do
    (assert-eq true (< x (+ target 0.1)))
    (assert-eq true (< (- target 0.1) x))))

(defn id (x) x)

(defn get-in (dict keys)
  (if (= () keys)
    dict
    (get-in (get dict (first keys)) (rest keys))))

(defn dict-set-in! (dict keys value)
  (if (= 1 (count keys))
    (dict-set! dict (first keys) value)
    (dict-set-in! (get dict (first keys)) (rest keys) value)))

(defn update-in! (dict key-path f)
  (dict-set-in! dict key-path (f (get-in dict key-path))))

(defn update-in (dict key-path f)
  (let (new (copy dict))
    (do (update-in! new key-path f)
	new)))

(defn assoc (dict key val)
  (let [new (copy dict)]
    (do 
      (dict-set! new key val)
      new)))

(defn assoc-in (dict keys val)
  (let [new (copy dict)]
    (do 
      (dict-set-in! new keys val)
      new)))

(defn join (separator xs)
  (match (count xs)
    0 ""
    1 (str (first xs))
    _ (str (first xs) separator (join separator (rest xs)))))

(defn replicate (thing times)
  (if (< times 1)
    '()
    (cons thing (replicate thing (- times 1)))))

(defn repeatedly (f times)
  (if (< times 1)
    '()
    (cons (f) (repeatedly f (- times 1)))))

(def total-time 0)

(defmacro time (form)
  (list 'let (list 't1 (list 'now))
        (list 'let (list 'result form
                         't (list '- (list 'now) 't1))
              (list 'do
                    (list 'println (list 'str "Evaluating form took " 't "ms."))
                    (list 'reset! 'total-time (list '+ 'total-time 't))
                    'result))))

(defmacro swap! (sym f)
  (list 'reset! sym (list f sym)))

(defn inc (x) (+ x 1))
(defn dec (x) (- x 1))

(defn contains? (items item)
  (match items
    () false
    (x & xs) (if (= x item)
               true
               (contains? xs item))))

(defn log (message value)
  (do
    (println (str message value))
    value))

(defn nil? (x) (= nil x))

(defn int? (x) (= :int (type x)))
(defn string? (x) (= :string (type x)))
(defn symbol? (x) (= :symbol (type x)))
(defn keyword? (x) (= :keyword (type x)))
(defn env? (x) (= :env (type x)))
(def dict? env?)
(defn list? (x) (= :list (type x)))
(defn macro? (x) (= :macro (type x)))
(defn lambda? (x) (= :lambda (type x)))
(defn foreign? (x) (= :foreign (type x)))
(defn primop? (x) (= :primop (type x)))

(defn range (start stop)
  (if (< start stop)
    (cons start (range (inc start) stop))
    '()))

(defn range-f (start stop step)
  (if (< start stop)
    (cons start (range-f (+ start step) stop step))
    '()))

(defn reverse (l)
  (match l
    () ()
    (x) (list x)
    (x & xs) (cons-last (reverse xs) x)))

(defn has-key? (dict key)
  (not (= () (get-maybe dict key))))

(defn even? (x) (= 0 (mod x 2)))
(defn odd? (x) (= 1 (mod x 2)))

(defn last (xs)
  (match xs
    () (error "Can't call last on empty list.")
    (x) x
    _ (last (rest xs))))

(defn mapcat (f xs)
  (apply concat (map f xs)))

(def load load-lisp) ;; alias to allow inferior-lisp-mode to load file

(defn true? (x) (= true x))
(defn false? (x) (= false x))

(defn all? (pred xs)
  (= (count xs) (count (filter pred xs))))

(defn remove (pred xs)
  (filter (fn (x) (not (pred x))) xs))

(defn cons-unique (x xs)
  (if (contains? xs x)
    xs
    (cons x xs)))

(defn set-internal (xs ys)
  (match xs
    () ys
    (x & xs) (set-internal xs (cons-unique x ys))
    (x) (cons-unique x ys)))

(defn set (xs)
  (set-internal xs '()))

(defn union (xs ys)
  (let [both (concat xs ys)]
    (set both)))

(defn intersection (xs ys)
  (match xs
    () ()
    (x & xs) (if (contains? ys x)
               (cons x (intersection xs ys))
               (intersection xs ys))))

(defmacro for (b body)
  (match b
    (sym start limit) (list 'let (list sym start)
                            (list 'while (list '< sym limit)
                                  (list 'do
                                        body
                                        (list 'reset! sym (list '+ sym 1)))))
    _ (error "Failed to match bindings in for loop.")))

(defn ls () (system "ls"))
(defn pwd () (system "pwd"))
(defn user () (getenv "USER"))

(register-builtin "srand" '(:int) :void)
(register-builtin "rand" '() :int)
(register-builtin "max" '(:int :int) :int)
(register-builtin "inc" '(:int) :int)
(register-builtin "dec" '(:int) :int)
(register-builtin "sinf" '(:float) :float)
(register-builtin "cosf" '(:float) :float)
(register-builtin "sqrtf" '(:float) :float)
(register-builtin "itof" '(:int) :float)
(register-builtin "itos" '(:int) :string)
(register-builtin "panic" '((:ref :string)) :void)
(register-builtin "printf" '((:ref :string)) :void)
(register-builtin "print" '((:ref :string)) :void)
(register-builtin "println" '((:ref :string)) :void)
(register-builtin "sleep" '(:int) :void)
(register-builtin "nullQMARK" '((:ptr :any)) :bool)
(register-builtin "not" '(:bool) :bool)
(register-builtin "strlen" '((:ref :string)) :int)
(register-builtin "string_append" '((:ref :string) (:ref :string)) :string)
(register-builtin "file_existsQMARK" '((:ref :string)) :bool)
(register-builtin "eat_string" '(:string) :void)
(register-builtin "string_copy" '((:ref :string)) :string)
