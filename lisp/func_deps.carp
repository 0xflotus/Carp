
;; vars-in-scope is a list of symbols
;; deps is a list of symbols refering to the functions that has to be baked for this function to work

(defn global? (vars-in-scope symbol)
  (not (contains? vars-in-scope symbol)))

(defn find-func-deps (ast bake-deps)
  (let [deps (copy '())

        _ (when (not (dict? ast)) (error (str "ast is not a dict: " ast)))
        _ (when (not (= :function (get-maybe ast :node))) (error (str "ast is not a function ast node: " ast)))
        
        func-name (let [n (get-maybe ast :name)] (if (nil? n) "" n))

        find-deps-in-list (fn (asts vars-in-scope)
                            (reduce (fn (result a) (cons-last result (find-func-deps-internal a vars-in-scope))) '() asts))

        find-deps-in-bindings (fn (bindings vars-in-scope)
                                (reduce (fn (result binding) (cons-last result (update-in binding '(:value) (fn (bv) (find-func-deps-internal bv vars-in-scope))))) '() bindings))

        find-func-deps-internal (fn (ast vars-in-scope)
                                  (do ;;(println (str "visit: " (:node ast)))
                                      (match (:node ast)

                                        :lookup (let [symbol (:value ast)
                                                      symbol-name (str symbol)
                                                      is-global-lookup (global? vars-in-scope symbol)
                                                      ;;_ (println (str "Comparing " func-name " with " symbol-name))
                                                      self-recursive (= func-name symbol-name)
                                                      is-constructor (= true (get-maybe ast :constructor))
                                                      ]
                                                  (if self-recursive
                                                    (assoc ast :self-recursive true)
                                                    (do
                                                      (when is-global-lookup
                                                        (let [evaled (eval symbol)
                                                              is-primop (primop? evaled)
                                                              is-lambda (lambda? evaled)]
                                                          (do
                                                            (when is-constructor
                                                              (do
                                                                (reset! deps (cons symbol deps))))
                                                            (when (and is-lambda bake-deps) ;; Bake, then add to deps
                                                              (do
                                                                ;;(println (str symbol " is a dependency of " func-name ", code: " (code evaled)))
                                                                (bake-internal (new-builder) (str symbol) (code evaled) '() false)
                                                                (reset! deps (cons symbol deps))))
                                                            (when (and (foreign? evaled))
                                                              (reset! deps (cons symbol deps)))
                                                            )))                                                      
                                                      (assoc ast :global-lookup is-global-lookup))))

                                        :reset (update-in ast '(:expr) (fn (a) (find-func-deps-internal a vars-in-scope)))

                                        :app (let [ast0 (update-in ast '(:head) (fn (a) (find-func-deps-internal a vars-in-scope)))
                                                   ast1 (update-in ast0 '(:tail) (fn (a) (find-deps-in-list a vars-in-scope)))]
                                               ast1)
                                        
                                        :function (let [args (:args ast)
                                                        new-vars (union (map :name args) vars-in-scope)
                                                        ;;_ (println (str "new-vars: " new-vars))
                                                        ]
                                                    (update-in ast '(:body) (fn (a) (find-func-deps-internal a new-vars))))

                                        :if (let [ast0 (update-in ast  '(:expr) (fn (a) (find-func-deps-internal a vars-in-scope)))
                                                  ast1 (update-in ast0 '(:if-true) (fn (a) (find-func-deps-internal a vars-in-scope)))
                                                  ast2 (update-in ast1 '(:if-false) (fn (a) (find-func-deps-internal a vars-in-scope)))]
                                              ast2)

                                        :while (let [ast0 (update-in ast  '(:expr) (fn (a) (find-func-deps-internal a vars-in-scope)))
                                                     ast1 (update-in ast0 '(:body) (fn (a) (find-func-deps-internal a vars-in-scope)))]
                                              ast1)

                                        :binop (let [ast0 (update-in ast  '(:left) (fn (a) (find-func-deps-internal a vars-in-scope)))
                                                     ast1 (update-in ast0 '(:right) (fn (a) (find-func-deps-internal a vars-in-scope)))]
                                                 ast1)

                                        :literal ast

                                        :do (let [new-ast (update-in ast '(:forms) (fn (a) (find-deps-in-list a vars-in-scope)))]
                                              new-ast)

                                        :let (let [;;_ (println (str "ast:\n" ast))
                                                   bindings (:bindings ast)
                                                   new-vars (union (map :name bindings) vars-in-scope)
                                                   ast0 (assoc ast :bindings (find-deps-in-bindings bindings new-vars))
                                                   ;;_ (println (str "ast0:\n" ast0))
                                                   ]
                                               (update-in ast0 '(:body) (fn (a) (find-func-deps-internal a new-vars))))

                                        :ref (let [ast0 (update-in ast '(:expr) (fn (a) (find-func-deps-internal a vars-in-scope)))]
                                               ast0)

                                        ;; (if (= :lookup (get-in ast0 '(:expr :node)))
                                        ;;          (assoc ast0 :ref-dep (str (get-in ast0 '(:expr :value)))) ;; this ref is depending on another variable
                                        ;;          ast0)

                                        :null ast

                                        x (error (str "find-func-deps can't handle node: " x))
                                        
                                        )))
        
        new-ast (find-func-deps-internal ast '())]
    (assoc new-ast :func-deps deps)))

