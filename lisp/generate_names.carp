;; These names are used for temp variables when emitting the C-code.

(defn gen-var-name (var-name-counters base-name)
  (let [maybe-counter (get-maybe var-name-counters base-name)]
    (do (when (nil? maybe-counter)
          (dict-set! var-name-counters base-name 0))
        (let [counter (get var-name-counters base-name)]
          (do (dict-set! var-name-counters base-name (inc counter))
              (str "_" base-name "_" counter))))))  

(defn generate-names (var-name-counters ast)
  (do
    ;;(println (str "\ngenerate-names:\n" (:node ast)))
    (match (:node ast)

      :function (let [ast1 (assoc ast :body (generate-names var-name-counters (:body ast)))
                      ast2 (assoc ast1 :result-name (gen-var-name var-name-counters "final_result"))]
                  ast2)
      
      :if (let [if-result-name (gen-var-name var-name-counters "if_result")
                ast1 (assoc ast :result-name if-result-name)
                ast2 (assoc ast1 :expr (generate-names var-name-counters (:expr ast)))
                ast3 (assoc ast2 :if-true (generate-names var-name-counters (:if-true ast)))
                ast4 (assoc ast3 :if-false (generate-names var-name-counters (:if-false ast)))]
            ast4)

      :while (let [while-expr-name (gen-var-name var-name-counters "expr")
                   ast1 (assoc ast :while-expr-name while-expr-name)
                   ast2 (assoc ast1 :body (generate-names var-name-counters (:body ast)))
                   ast3 (assoc ast2 :expr (generate-names var-name-counters (:expr ast)))]
               ast3)
      
      :let (let [let-result-name (gen-var-name var-name-counters "let_result")
                 ast1 (assoc ast :bindings (map (fn (x) (generate-names var-name-counters x)) (:bindings ast)))
                 ast2 (assoc ast1 :body (generate-names var-name-counters (:body ast)))
                 ast3 (assoc ast2 :result-name let-result-name)]
             ast3)
      
      :binding (let [named-value (generate-names var-name-counters (:value ast))]
                 (assoc ast :value named-value))
      
      :app (let [head (:head ast)
                 func-name (:value head)
                 c-func-name (c-ify-name (str func-name))
                 app-result-name (gen-var-name var-name-counters (str "result"))

                 args (:tail ast)
                 arg-names (repeatedly (fn () (gen-var-name var-name-counters "arg")) (count args))
                 
                 ast1 (assoc ast :head (generate-names var-name-counters (:head ast)))
                 ast2 (assoc ast1 :tail (map (fn (node) (generate-names var-name-counters node)) (:tail ast1)))
                 ast3 (assoc ast2 :result-name app-result-name)
                 
                 ast4 (assoc ast3 :tail (map2 (fn (arg arg-name) (assoc arg :arg-name arg-name)) (:tail ast3) arg-names))
                 ]
             ast4)

      :binop (let [ast1 (assoc ast  :left (generate-names var-name-counters (:left ast)))
                   ast2 (assoc ast1 :right (generate-names var-name-counters (:right ast)))]
               ast2)
      
      :do (let [named-forms (map (fn (x) (generate-names var-name-counters x)) (:forms ast))
                ast1 (assoc ast :forms named-forms)]
            ast1)
      
      :literal (assoc ast :result-name (gen-var-name var-name-counters "lit"))

      :ref (let [named-expr (generate-names var-name-counters (:expr ast))
                 ast1 (assoc ast :expr named-expr)
                 ;;ast2 (assoc ast1 :result-name (str "ref_" (gen-name)))
                 ]
             ast1)

      :reset (let [named-expr (generate-names var-name-counters (:expr ast))]
               (assoc ast :expr named-expr))

      :lookup ast

      :null ast
      
      _ (error (str "Can't generate name for node " ast))
      
      )))
