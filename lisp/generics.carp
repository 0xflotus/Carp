
(defn generic-safe-name [t]
  (match t
    () ""
    (x ... xs) (str (generic-safe-name x) "<" (join "-" (map generic-safe-name xs)) ">")
    x (if (keyword? x)
        (name t)
        (error (str "generic-safe-name can't handle type signature: " t)))))

(defn generic-suffix [signature]
  (str (join "-" (map generic-safe-name (nth signature 1)))
       "-"
       (generic-safe-name (nth signature 2))))

(defn generic-name [base-name signature]
  (do
    ;;(println (str "Will find generic name for " base-name " with signature " signature))
    (str base-name "--" (generic-suffix signature))))

;; Used for let polymorphism to make the generic type of a function unique (i.e. change all the "T":s to a fresh typevar)
;; (:fn ("T" "S") "T") becomes (:f ("t319" "t302") "t319)
(defn uniquify-typevars [t]
  (uniquify-typevars-internal t (copy {})))

(defn uniquify-typevars-internal [t substs]
  (if (string? t)
    (let [existing-tvar (get-maybe substs t)]
      (if (nil? existing-tvar)
        (let [new-tvar (gen-typevar)]
          (do                          
            (dict-set! substs t new-tvar)
            new-tvar))
        existing-tvar))
    (if (keyword? t)
      t
      (if (list? t)
        (map (fn [x] (uniquify-typevars-internal x substs)) t)
        (error (str "Can't handle t " t " of type " (type t)))))))

(defn mark-lambda-as-generic [func-name annotated-ast]
  (let [func-def (eval (symbol func-name))]
    (do
      (meta-set! func-def :generic true)
      (meta-set! func-def :signature (:type annotated-ast))
      (def ast annotated-ast)
      (def s (pretty-signature (:type annotated-ast)))
      (if echo-signature-after-bake
        (println (str func-name " : " s))
        nil))))

(defn visit-generic-funcs [ast]
  (let [deps (copy (:func-deps ast))

        visit-lookup (fn [ast]
                       (let [t (:type ast)]
                         (do
                           ;;(println (str (:value ast) " : " t))
                           (if (and (nil? (get-maybe ast :self-recursive)) (:global-lookup ast))
                             (let [lookup-sym (:value ast)
                                   ;;_ (println (str "Will eval " ast))
                                   global-lookup (eval lookup-sym)
                                   lookup-t (type global-lookup)
                                   ;;_ (println (str "lookup-t: " lookup-t))
                                   is-generic (meta-get lookup-t :generic)
                                   ]
                               (if (and (lambda? global-lookup) is-generic)
                                 (if (generic-type? t)
                                   (do
                                     ;;(println (str "Lambda with missing type information, can't compile concrete version: " lookup-sym " of type " t))
                                     ast)
                                   (let [n (generic-name lookup-sym t)]
                                     (do
                                       ;;(println (str "generic lookup of '" lookup-sym "', t: " t ", lookup-t: " lookup-t ", n: " generic-name))
                                       (compiler/concretize (str lookup-sym) n (code global-lookup) t)
                                       (reset! deps (cons n deps))
                                       (let [ast0 (assoc-in ast '(:value) (symbol n))] ;; make it call another function...
                                         ast0))))
                                 (if (and (primop? global-lookup) is-generic)
                                   (if (generic-type? t)
                                     (do ;;(println (str "Primop with missing type information, can't compile concrete version: " t))
                                       ast)
                                     (let [n (generic-name lookup-sym t)]
                                       (do
                                         ;;(println (str "Found a generic primop to bake: " lookup-sym))
                                         ;; (println (str "Final name will be " n))
                                         (bake-generic-primop n
                                                              (str lookup-sym)
                                                              t)
                                         (reset! deps (cons n deps))
                                         (assoc-in ast '(:value) (symbol n)))))

                                   (if (and (key-is-true? ast :constructor) (key-is-true? ast :generic))
                                     (let [_ (println (str "AST:\n" ast))
                                           struct-name (:struct-name ast)
                                           concrete-struct-type (nth t 2)
                                           _ (println (str "concrete-struct-type: " concrete-struct-type))
                                           concrete-struct-name (generic-safe-name concrete-struct-type)
                                           constructor-name (str "new-" concrete-struct-name)
                                           typevars (:typevars ast)
                                           concrete-types (rest concrete-struct-type)
                                           ]
                                       (do
                                         (concretize-struct struct-name concrete-struct-name concrete-types typevars)
                                         (reset! deps (cons constructor-name deps))
                                         (assoc-in ast '(:value) (symbol constructor-name))))
                                     ast)
                                   )))
                             ast))))

        visit-generic-funcs-internal (fn [ast]
                                       (match (:node ast)
                                         :function (update-in ast '(:body) visit-generic-funcs-internal)
                                         :app (let [ast0 (update-in ast '(:head) visit-generic-funcs-internal) ;; todo: use a here
                                                    ast1 (update-in ast0 '(:tail) (fn (a) (map visit-generic-funcs-internal (:tail ast))))]
                                                ast1)
                                         :lookup (visit-lookup ast)

                                         :if (let [ast0 (update-in ast '(:expr) visit-generic-funcs-internal)
                                                   ast1 (update-in ast0 '(:if-true) visit-generic-funcs-internal)
                                                   ast2 (update-in ast1 '(:if-false) visit-generic-funcs-internal)]
                                               ast2)

                                         :binop (let [ast0 (update-in ast '(:left) visit-generic-funcs-internal)
                                                      ast1 (update-in ast0 '(:right) visit-generic-funcs-internal)]
                                                  ast1)

                                         :reset (let [ast0 (update-in ast '(:expr) visit-generic-funcs-internal)]
                                                  ast0)

                                         :literal ast

                                         :ref (update-in ast '(:expr) visit-generic-funcs-internal)

                                         :let (let [ast0 (update-in ast '(:bindings)
                                                                    (fn [forms] (map visit-generic-funcs-internal forms)))]
                                                (update-in ast0 '(:body) visit-generic-funcs-internal))

                                         :binding (update-in ast '(:value) visit-generic-funcs-internal)

                                         :while (let [ast0 (update-in ast '(:expr) visit-generic-funcs-internal)
                                                      ast1 (update-in ast0 '(:body) visit-generic-funcs-internal)]
                                                  ast1)

                                         :null ast

                                         :array (update-in ast '(:values) (fn [vals] (map visit-generic-funcs-internal vals)))

                                         :do (update-in ast '(:forms) (fn [forms] (map visit-generic-funcs-internal forms)))
                                         
                                         x (error (str "visit-generic can't handle node type " x))))]
    (assoc (visit-generic-funcs-internal ast) :func-deps deps)))

