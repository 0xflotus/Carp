
(defn generic-safe-name (t)
  (match t
         (:fn args ret) (str "Fn_" (join "" (map pretty-signature args)) "->" (pretty-signature ret))
         (:ref r) (str "RefTo_" (pretty-signature r) "")
         (:Array a) (str "ArrayOf_" (pretty-signature a) "")
         x (if (keyword? t) (name t)
               (error (str "generic-safe-name can't handle type signature: " t)))))


(defn generic-suffix (signature)
  (str (join "-" (map generic-safe-name (nth signature 1)))
       "-"
       (generic-safe-name (nth signature 2))))

(defn generic-name [base-name signature]
  (str base-name "--" (generic-suffix signature)))

(defn visit-generic-funcs [ast]
  (let [deps (copy (:func-deps ast))

        visit-lookup (fn [ast]
                       (let [t (:type ast)]
                         (do
                           ;;(println (str (:value ast) " : " t))
                           (if (and (nil? (get-maybe ast :self-recursive)) (:global-lookup ast))
                             (let [lookup-sym (:value ast)
                                   ;;_ (println (str "Will eval " ast))
                                   global-lookup (eval lookup-sym)
                                   lookup-t (type global-lookup)
                                   ;;_ (println (str "lookup-t: " lookup-t))
                                   is-generic (meta-get lookup-t :generic)
                                   ]
                               (if (and (lambda? global-lookup) is-generic)
                                 (let [n (generic-name lookup-sym t)]
                                   (do
                                     ;;(println (str "generic lookup of '" lookup-sym "', t: " t ", lookup-t: " lookup-t ", n: " generic-name))
                                     (bake-generic-func-internal (new-builder)
                                                                 n
                                                                 (code global-lookup)
                                                                 '()
                                                                 false
                                                                 t)
                                     (reset! deps (cons (symbol n) deps))
                                     (let [ast0 (assoc-in ast '(:value) (symbol n))] ;; make it call another function...
                                       ast0)))
                                 (if (and (primop? global-lookup) is-generic)
                                   (let [n (generic-name lookup-sym t)]
                                     (do
                                       ;; (println (str "Found a generic primop to bake: " lookup-sym))
                                       ;; (println (str "Final name will be " n))
                                       (bake-generic-primop (new-builder)
                                                            n
                                                            (str lookup-sym)
                                                            t)
                                       ;;(reset! deps (cons (symbol n) deps))
                                       (assoc-in ast '(:value) (symbol n))))
                                   ast)))
                             ast))))

        visit-generic-funcs-internal (fn [ast]
                                       (match (:node ast)
                                         :function (update-in ast '(:body) visit-generic-funcs-internal)
                                         :app (let [ast0 (update-in ast '(:head) visit-generic-funcs-internal) ;; todo: use a here
                                                    ast1 (update-in ast0 '(:tail) (fn (a) (map visit-generic-funcs-internal (:tail ast))))]
                                                ast1)
                                         :lookup (visit-lookup ast)

                                         :if (let [ast0 (update-in ast '(:expr) visit-generic-funcs-internal)
                                                   ast1 (update-in ast0 '(:if-true) visit-generic-funcs-internal)
                                                   ast2 (update-in ast1 '(:if-false) visit-generic-funcs-internal)]
                                               ast2)

                                         :binop (let [ast0 (update-in ast '(:left) visit-generic-funcs-internal)
                                                      ast1 (update-in ast0 '(:right) visit-generic-funcs-internal)]
                                                  ast1)

                                         :reset (let [ast0 (update-in ast '(:expr) visit-generic-funcs-internal)]
                                                  ast0)

                                         :literal ast

                                         :ref ast

                                         :let (let [ast0 (update-in ast '(:bindings)
                                                                    (fn [forms] (map visit-generic-funcs-internal forms)))]
                                                (update-in ast0 '(:body) visit-generic-funcs-internal))

                                         :binding (update-in ast '(:value) visit-generic-funcs-internal)

                                         :while (let [ast0 (update-in ast '(:expr) visit-generic-funcs-internal)
                                                      ast1 (update-in ast0 '(:body) visit-generic-funcs-internal)]
                                                  ast1)

                                         :null ast

                                         :do (update-in ast '(:forms) (fn [forms] (map visit-generic-funcs-internal forms)))
                                         
                                         x (error (str "visit-generic can't handle node type " x))))]
    (assoc (visit-generic-funcs-internal ast) :func-deps deps)))


(defn bake-generic-primop [builder func-name primop-name signature]
  (let [c-func-name (c-ify-name func-name)
        c-file-name (str out-dir c-func-name ".c")
        c-code (build-generic-primop c-func-name primop-name signature)
        arg-types (nth signature 1)
        return-type (nth signature 2)]
    (do
      ;;(println (str "C-code for " func-name ":\n" c-code))
      (add-func! c-func-name c-code nil)
      ;;(println (str "Baked generic primop " func-name))
      )))

(defn build-generic-primop [c-func-name primop-name signature]
  (match primop-name
    "nth" (match signature
            (:fn ((:Array t) :int) t) (str (type-build t) " " c-func-name
                                           "(Array *a, int index) { return ((" (type-build t) "*)(a->data))[index]; }")
            _ (error "Invalid type for call to 'nth'"))
    "array-of-size" (match signature
                      (:fn (:int) (:Array t)) (str (type-build '(:Array t)) " " c-func-name
                                                   "(int count) {"
                                                   " Array *a = malloc(sizeof(Array));"
                                                   " a->count = count;"
                                                   " a->data = calloc(count, sizeof(" (type-build t) "));"
                                                   " return a;"
                                                   "; }")
                      _ (error "Invalid type for call to 'array-of-size'"))
    "array-set" (match signature
                  (:fn ((:Array t) :int t) (:Array t)) (str (type-build '(:Array t)) " " c-func-name
                                                            "(Array *a, int index, " (type-build t) " value) {"
                                                            " ((" (type-build t) "*)(a->data))[index] = value;"
                                                            " return a;"
                                                            " }")
                  _ (error "Invalid type for call to 'array-set'"))
    x (error (str "Can't build generic primop for '" x "'"))))
