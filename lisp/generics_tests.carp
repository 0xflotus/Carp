;; GENERICS

(def id-ast (lambda-to-ast (code id)))
(def id-con (gencon id-ast))
(def id-asta (annotate-ast id-ast))

(defn test-generic-id []
  (do (bake id)
      (assert-eq true (meta-get id :generic))))

(test-generic-id)



(defn generic-call-1 []
  (if (id true) 10 20))

(defn test-generic-call-1 []
  (do (bake generic-call-1)
      (assert-eq (signature generic-call-1) (list :fn () :int))))

(test-generic-call-1)



(defn generic-call-2 [x]
  (+ (id 10) (id x)))

(defn test-generic-call-2 []
  (do (bake generic-call-2)
      (assert-eq (signature generic-call-2) (list :fn '(:int) :int))))

(test-generic-call-2)



(defn generic-call-3 [x]
  (do (reset! x (id true))
      x))

(defn test-generic-call-3 []
  (do (bake generic-call-3)
      (assert-eq (signature generic-call-3) (list :fn '(:bool) :bool))))

(test-generic-call-3)



(defn generic-call-4 []
  (let [pi (id 3.14)]
    pi))

(defn test-generic-call-4 []
  (do (bake generic-call-4)
      (assert-eq (signature generic-call-4) (list :fn '() :float))))

(test-generic-call-4)



;; Let-polymorphism
(defn polylet-1 []
  (let [a (id 1)
        b (id 2.0)]
    a))

(bake polylet-1)



(defstruct A [])
(defstruct B [])

(defn polylet-2 []
  (let [a (copy (ref (A)))
        b (copy (ref (B)))]
    b))

(bake polylet-2)



(defn istr []
  (str 42))
(bake istr)

(defn star []
  (str (ref [7 3 4])))
(bake star)

(defn star-f []
  (str (ref [7.2 3.1 4.2])))
(bake star-f)

(defn star-s []
  (str (ref [(string-copy "yeah") (string-copy "oh")])))
(bake star-s)



(defn a-function-as-argument [x y]
  (itos (+ x y)))

(defn generic-function-calling-generic-functions [prob-f prob-a prob-b]
  (prob-f prob-a prob-b))

(defn try-it-out [] (generic-function-calling-generic-functions a-function-as-argument 10 20))

(bake try-it-out)
(assert-eq "30" (try-it-out))



(defn test-uniquify []
  (let [n (uniquify-typevars '("T" :a "S" "T" ("S")))]
    (do (assert-eq (nth n 0) (nth n 3))
        (assert-eq (nth n 2) (get-in n '(4 0)))
        (assert-eq false (= (nth n 0) (nth n 2)))
        (assert-eq :a (nth n 1)))))

(test-uniquify)


