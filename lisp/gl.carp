
(def glfw (load-dylib "libglfw3.dylib"))

(reset! header-files (cons "<GLFW/glfw3.h>" header-files))

(register glfw "glfwInit" '() :bool)
(register glfw "glfwCreateWindow" '(:int :int (:ref :string) :GLFWmonitor :GLFWwindow) '(:ref :GLFWwindow))
(register glfw "glfwMakeContextCurrent" '((:ref :GLFWwindow)) :void)
(register glfw "glfwTerminate" '() :void)
(register glfw "glfwPollEvents" '() :void)
(register glfw "glfwWindowShouldClose" '((:ref :GLFWwindow)) :bool)
(register glfw "glfwSwapBuffers" '((:ref :GLFWwindow)) :void)

(register glfw "glfwSetKeyCallback" '((:ref :GLFWwindow) (:fn ((:ref :GLFWwindow) :int :int :int :int))) :void)

(register glfw "glClearColor" '(:float :float :float :float) :void)
(register glfw "glClear" '(:int) :void)
(register glfw "glColor3f" '(:float :float :float) :void)
(register glfw "glBegin" '(:int) :void)
(register glfw "glEnd" '() :void)
(register glfw "glVertex3f" '(:float, :float, :float) :void)

(def carp-gl-color-buffer-bit 16384)
(def carp-gl-lines 1)
(def carp-gl-line-strip 3)
(def carp-gl-triangles 4)

;; glfwSetKeyCallback(window, key_callback);
;; void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods);;

;; glfwSetCharCallback(window, character_callback);
;; void character_callback(GLFWwindow* window, unsigned int codepoint)

;; glfwSetCursorPosCallback(window, cursor_pos_callback);
;; static void cursor_position_callback(GLFWwindow* window, double xpos, double ypos)

(defn set-clear-color ()
  (glClearColor 0.0f 0.95f 0.75f 1.0f))

(defn draw-rect (x y w h)
  (do (glBegin carp-gl-triangles)
      (glVertex3f x y 0.0f)
      (glVertex3f (+ x w) y 0.0f)
      (glVertex3f (+ x w) (+ y h) 0.0f)
      (glVertex3f (+ x w) (+ y h) 0.0f)
      (glVertex3f x (+ y h) 0.0f)
      (glVertex3f x y 0.0f)
      (glEnd)))

