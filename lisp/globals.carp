
(defn type-of-value [val]
  (let [t (type val)]
    (if (or (= :ptr t) (= :ptr-to-global t))
      (meta-get val :type)
      (match t
        :array (if (= 0 (count val))
                 (error (str "Can't figure out type from empty array."))
                 (list :Array (type-of-value (nth val 0))))
        _ t))))

(defn type-of-global [global-variable-name]
  (let [s (symbol global-variable-name)
        t (type-of-value (eval s))]
    (do
      ;;(println (str "type of global " global-variable-name " is " t))
      t)))

(defn bake-global [variable-name mutable-deps]
  (let [t (type-of-global variable-name)
        evaled (eval (symbol variable-name))
        ;;_ (println (str "Global " variable-name " to bake has type " t " and value " evaled))
        c-variable-name (c-ify-name variable-name)
        init-value (if (contains? '(:int :float :double :string :char :bool) t)
                     (c-prn evaled)
                     "NULL")
        ]
    (if (graph/node-exists? variable-name)
      (do
        ;;(println (str "Ignoring already baked global variable: '" variable-name "'"))
        :ignored)
      (do
        ;;(println (str "Adding global named " variable-name " of type " t))
        (let [prototype (str "extern API " (type-build t) " " c-variable-name ";")
              c-code (str "API " (type-build t) " " c-variable-name " = " init-value ";")
              init-closure-name (str variable-name "-init-closure")
              init-value-safe (read (prn evaled)) ;; this removes bugs with ptrs to structs!!!
              init-closure-def (list 'defn (symbol init-closure-name) [] (list 'reset! (symbol variable-name) init-value-safe))
              ]
          (do
            (def c c-code)
            (compiler/bake-src variable-name prototype c-code t '())
            ;;(reset! mutable-deps (cons (symbol init-closure-name) mutable-deps))
            
            (when (= "NULL" init-value)
              (do
                (eval (list 'reset! (symbol variable-name) evaled)) ;; OBS! Must set the value of the global after baking it since the bake leaves it set to NULL:

                ;; (println (str "Defining init closure " init-closure-name))
                (eval init-closure-def)
                (compiler/bake-function-and-its-dependers init-closure-name)
                (graph/update-node! init-closure-name :is-init-closure true)

                ))          
            
            :baked))))))
