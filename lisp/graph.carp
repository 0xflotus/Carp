;; The dependency graph
;;
;; Nodes are functions, groups of mutually recursive functions, modules, structs, etc.
;; Each node can be compiled into its own dynamic library and depends on a set of other nodes.
;; Compiling a node should be very straight forward:
;;
;;  (bake-node "foo")
;;
;; The whole graph lives in a data structure called 'graph' which is a big dictionary.

(def graph {})
(def graph-src {})

^doc "kind - :function / :global (variable) / :struct / :module / function-type
      name - a string, also the key in the graph dictionary
      proto - what will go into the header file
      src - what will go into the C-file
      group - a string, the name used for the particular dylib where this node is compiled
      dylib-ptr - pointer to the dylib Obj
      depends-on - a list of names of nodes that this node depend on
     "
(defn graph/add-node! [kind name proto src group dylib-ptr depends-on order]
  (do (dict-set! graph-src name src)
      (dict-set! graph name {:kind kind
                             :name name
                             :proto proto
                             :group group
                             :dylib-ptr dylib-ptr
                             :depends-on (map str depends-on)
                             :order order})))

(defn graph/update-node! [name key value]
  (dict-set-in! graph (list name key) value))

(defn graph/dependers [name]
  (set
   (mapcat (fn [node]
             (let [deps (:depends-on node)]
               (if (contains? deps name)
                 (concat (list (:name node)) (graph/dependers (:name node)))
                 ())))
           (values graph))))

(defn graph/depending-groups [name]
  (mapcat (fn [node]
            (let [deps (:depends-on node)]
              (if (contains? deps name)
                (concat (list node) (graph/depending-groups (:group node)))
                ())))
          (values graph)))

(defn graph/node-exists? [name]
  (not-nil? (get-maybe graph name)))

(def extra-header-deps ())

(defn graph/get-kind [kind]
  (filter (fn [n] (= (:kind n) kind)) (values graph)))

(defn compare-order [a b]
  (< (:order a) (:order b)))

(defn graph/save-prototypes! ()
  (save (str out-dir "declarations.h")
        (str
         "#include <shared.h>\n"
         "\n\n//Extra headers:\n"
         (join "\n" (map (fn [header] (str "#include " header)) extra-header-deps))
         "\n\n//Structs & function types:\n"
         (join "\n" (map :proto (sort-by compare-order (concat (graph/get-kind :struct)
                                                               (graph/get-kind :function-type)))))
         "\n\n//Globals:\n"
         (join "\n" (map :proto (graph/get-kind :global)))
         "\n\n//Functions:\n"
         (join "\n" (map :proto (graph/get-kind :function)))
         "\n")))

(def log-unloading-of-dylibs false)

^doc "Takes the name of a function and unloads it if it is in the list of baked functions.
      Also turns foreign functions back into lambdas through 're-lambda-fy'."
(defn graph/unload [name]
  (when-let [baked-node (get-maybe graph name)]
    (let [dylib (get baked-node :dylib-ptr)]
      (do (when log-unloading-of-dylibs
            (println (str "Unloading " dylib " for function " name ".")))
          (unload-dylib dylib)
          (dict-remove! graph name)
          (graph/re-lambda-fy name)
          ))))

^doc "Removes all nodes belonging to a group and unloads their dylib. Not recursive, but returns depending groups."
(defn graph/unload-group [group-name]
  (let [dylib nil
        depending-groups '()]
    (do
      ;;(println (str "Will unload group '" group-name "'"))
      (map (fn [node]
             (do
               (when (= (:group node) group-name)
                 (do (dict-remove! graph (:name node))
                     (if (nil? dylib)
                       (reset! dylib (:dylib-ptr node))
                       (if (nil? (:dylib-ptr node))
                         :ignore
                         (assert-eq dylib (:dylib-ptr node))))))
               (when (contains? (:depends-on node) group-name)
                 (reset! depending-groups (cons (:group node) depending-groups)))))
           (values graph))
      (do (if (nil? dylib)
            :no-dylib-to-unload
            (unload-dylib dylib))
          depending-groups))))

(defn graph/re-lambda-fy [func-name]
  (let [function-symbol (if (symbol? func-name)
                          func-name
                          (symbol func-name))
        func (eval function-symbol)]
    (if (foreign? func)
      (let [func-code (meta-get func :code)]
        (do
          ;;(println (str "re-lambda-fy:ing baked function '" func-name "' using original code: " func-code))
          (eval (list 'def (symbol func-name) func-code))))
      (do
        ;;(println (str "re-lambda-fy will ignore non-baked function: " func-name))
        :ignore))))

;; (defn graph/re-lambda-fy-all-functions []
;;   (map re-lambda-fy (graph/get-kind :function)))

(defn graph/print []
  (println (str (keys graph))))
