;; OWNERSHIP


(defn own-1 (s)
  (eat-string s))

(defn test-own-1 ()
  (do
    (assert-eq '(:fn (:string) :void)
               (sig own-1))
    (assert-eq {:node :function, 
                :free (), 
                :body ()}
               (ownership-analyze own-1))))

(test-own-1)



(defn own-2 (s)
  (string-copy s))

(defn test-own-2 ()
  (do
    (assert-eq '(:fn ((:ref :string)) :string)
               (sig own-2))
    (assert-eq {:node :function, 
                :free '(), 
                :body ()}
               (ownership-analyze own-2))))

(test-own-2)



(defn own-3 ()
  (string-copy (ref (string-copy "CARP"))))

(defn test-own-3 ()
  (do
    (assert-eq '(:fn () :string)
               (sig own-3))
    (assert-eq {:node :function, 
                :free '({:name "_result_1" :type :string}),
                :body ()}
               (ownership-analyze own-3))))

(test-own-3)



(defn own-4 ()
  (let [s (string-copy "CARP1")]
    (string-copy "CARP2")))

(defn test-own-4 ()
  (do
    (assert-eq '(:fn () :string)
               (sig own-4))
    (assert-eq '{:node :function, 
                 :free (), 
                 :body {:node :let, 
                        :free ({:name "s", 
                                :type :string}), 
                        :body ()}}
               (ownership-analyze own-4))))

(test-own-4)



(defn own-5 ()
  (let [s1 (string-copy "CARP1")
        s2 (string-copy (ref s1))]
    0))

(defn test-own-5 ()
  (do
    (assert-eq '(:fn () :int)
               (sig own-5))
    (assert-eq '{:node :function, 
                 :free (), 
                 :body {:node :let, 
                        :free ({:name "s2", 
                                :type :string}
                               {:name "s1", 
                                :type :string}), 
                        :body ()}}
               (ownership-analyze own-5))))

(test-own-5)



(defn own-6 ()
  (let [s1 (string-copy "CARP")]
    (let [s2 (string-copy (ref s1))]
      0)))

(defn test-own-6 ()
  (do
    (assert-eq '(:fn () :int)
               (sig own-6))
    (assert-eq '{:node :function, 
                 :free (), 
                 :body {:node :let, 
                        :free ({:name "s1", 
                                :type :string}), 
                        :body {:node :let, 
                               :free ({:name "s2", 
                                       :type :string}), 
                               :body ()}}}
               (ownership-analyze own-6))))

(test-own-6)



(defn own-7 ()
  (let [s1 (string-copy "CARP")]
    (do
      (eat-string s1)
      (eat-string s1))))

(defn test-own-7 ()
  (assert-error error-given-away (ownership-analyze own-7)))

(test-own-7)



(defn own-8 ()
  (let [s (string-copy "CARP1")]
    (if true
      s
      (string-copy "CARP2"))))

(defn test-own-8 ()
  (do
    (assert-eq '(:fn () :string)
               (sig own-8))
    (assert-eq '{:node :function, 
                 :free (), 
                 :body {:node :let
                        :free ()
                        :body {:node :if, 
                               :free-left (), 
                               :free-right ({:name "s"
                                             :type :string})
                               :body-left ()
                               :body-right ()}}}
               (ownership-analyze own-8))))

(test-own-8)




(defn own-9 ()
  (let [s (string-copy "CARP1")]
    (if true
      s
      s)))

(defn test-own-9 ()
  (do
    (assert-eq '(:fn () :string)
               (sig own-9))
    (assert-eq '{:node :function, 
                 :free (), 
                 :body {:node :let
                        :free ()
                        :body {:node :if, 
                               :free-left (), 
                               :free-right ()
                               :body-left ()
                               :body-right ()}}}
               (ownership-analyze own-9))))

(test-own-9)




(defn own-10 ()
  (let [s (string-copy "CARP1")]
    (if true
      10
      20)))

(defn test-own-10 ()
  (do
    (assert-eq '(:fn () :int)
               (sig own-10))
    (assert-eq '{:node :function, 
                 :free (), 
                 :body {:node :let
                        :free ({:name "s"
                                :type :string})
                        :body {:node :if, 
                               :free-left (), 
                               :free-right ()
                               :body-left ()
                               :body-right ()}}}
               (ownership-analyze own-10))))

(test-own-10)


(defn own-11 ()
  (let [s1 (string-copy "CARP1")
        s2 (string-copy "CARP2")]
    (if true
      s1
      s2)))

(defn test-own-11 ()
  (do
    (assert-eq '(:fn () :string)
               (sig own-11))
    (assert-eq '{:node :function, 
                 :free (), 
                 :body {:node :let
                        :free ()
                        :body {:node :if, 
                               :free-left ({:name "s2"
                                            :type :string}),
                               :free-right ({:name "s1"
                                             :type :string})
                               :body-left ()
                               :body-right ()}}}
               (ownership-analyze own-11))))

(test-own-11)


;; (defn own-8 [s]
;;   (let [count (strlen (ref a))]
;;     (if (< pos count)
;;       (fill-array (string-array-set a pos value) (+ pos 1) value)
;;       a)))






(defn own-1000 ()
  (let [a (string-copy "a")
        ;b (ref a)
        ]
    (do
      (string-copy (ref a))
      (eat-string a)
      )))














(defn run-ownership-tests ()
  (do 

    (defn own-string-1 ()
      (strlen (ref (string-copy "hej"))))

    (def own-ast-1 (lambda-to-ast (code own-string-1)))
    (def own-con-1 (gencon own-ast-1))
    (def own-asta-1 (annotate-ast own-ast-1))

    (defn test-own-1 ()
      (let [free (:free own-asta-1)]
        (do (bake own-string-1)
            (assert-eq 1 (count free))
            (assert-eq :string (:type (nth free 0))))))
    (test-own-1)

    (defn own-string-2 ()
      (eat-string (string-copy "hej")))

    (def own-ast-2 (lambda-to-ast (code own-string-2)))
    (def own-con-2 (gencon own-ast-2))
    (def own-asta-2 (annotate-ast own-ast-2))
    (defn test-own-2 ()
      (let [free (:free own-asta-2)]
        (do (bake own-string-2)
            (assert-eq 0 (count free))
            (assert-eq '(:fn () :void) (:type own-asta-2)))))
    (test-own-2)


    (defn own-string-3 ()
      (string-copy "hej"))

    (def own-ast-3 (lambda-to-ast (code own-string-3)))
    (def own-con-3 (gencon own-ast-3))
    (def own-asta-3 (annotate-ast own-ast-3))
    (defn test-own-3 ()
      (let [free (:free own-asta-3)]
        (do (bake own-string-3)
            (assert-eq 0 (count free))
            (assert-eq '(:fn () :string) (:type own-asta-3)))))
    (test-own-3)


    (defn own-string-4 (s)
      (eat-string s))

    (def own-ast-4 (lambda-to-ast (code own-string-4)))
    (def own-con-4 (gencon own-ast-4))
    (def own-asta-4 (annotate-ast own-ast-4))
    (defn test-own-4 ()
      (let [free (:free own-asta-4)]
        (do (bake own-string-4)
            (assert-eq 0 (count free))
            (assert-eq '(:fn (:string) :void) (:type own-asta-4)))))
    (test-own-4)


    (defn own-string-5 (s)
      (strlen s))

    (def own-ast-5 (lambda-to-ast (code own-string-5)))
    (def own-con-5 (gencon own-ast-5))
    (def own-asta-5 (annotate-ast own-ast-5))
    (defn test-own-5 ()
      (let [free (:free own-asta-5)]
        (do (bake own-string-5)
            (assert-eq 0 (count free))
            (assert-eq '(:fn ((:ref :string)) :int) (:type own-asta-5)))))
    (test-own-5)


    (defn own-string-6 (sr)
      (strlen (ref sr)))

    (def own-ast-6 (lambda-to-ast (code own-string-6)))
    (def own-con-6 (gencon own-ast-6))
    (def own-asta-6 (annotate-ast own-ast-6))
    (defn test-own-6 ()
      (let [free (:free own-asta-6)]
        (do (bake own-string-6)
            (assert-eq 1 (count free))
            (assert-eq :string (:type (nth free 0)))
            (assert-eq '(:fn (:string) :int) (:type own-asta-6)))))
    (test-own-6)


    (defn own-string-7 (s1 s2)
      (str-append (ref s2) (ref (str-append (ref s1) (ref s2)))))

    (def own-ast-7 (lambda-to-ast (code own-string-7)))
    (def own-con-7 (gencon own-ast-7))
    (def own-asta-7 (annotate-ast own-ast-7))
    (defn test-own-7 ()
      (let [free (:free own-asta-7)]
        (do (assert-eq '(:fn (:string :string) :string) (:type own-asta-7))
            (assert-eq 3 (count free))
            (bake own-string-7)
            (assert-eq (own-string-7 "a" "b") "bab"))))
    (test-own-7)


    (defn own-string-8 (s1 s2)
      (str-append (ref s2) (ref (str-append (ref s1) (ref (string-copy "!"))))))

    (def own-ast-8 (lambda-to-ast (code own-string-8)))
    (def own-con-8 (gencon own-ast-8))
    (def own-asta-8 (annotate-ast own-ast-8))
    (defn test-own-8 ()
      (let [free (:free own-asta-8)]
        (do (assert-eq '(:fn (:string :string) :string) (:type own-asta-8))
            (bake own-string-8)
            (assert-eq 4 (count free))
            (assert-eq :string (:type (nth free 0)))
            (assert-eq :string (:type (nth free 1)))
            (assert-eq :string (:type (nth free 2)))
            (assert-eq :string (:type (nth free 3)))
            (assert-eq (own-string-8 "a" "b") "ba!"))))
    (test-own-8)


    (defn own-string-9 (s x)
      (str-append (ref (itos (* x x))) s))

    (def own-ast-9 (lambda-to-ast (code own-string-9)))
    (def own-con-9 (gencon own-ast-9))
    (def own-asta-9 (annotate-ast own-ast-9))
    (defn test-own-9 ()
      (let [free (:free own-asta-9)]
        (do (assert-eq '(:fn ((:ref :string) :int) :string) (:type own-asta-9))
            (assert-eq 1 (count free))
            (assert-eq :string (:type (nth free 0)))
            (bake own-string-9)
            (assert-eq (own-string-9 "hello" 3) "9hello"))))
    (test-own-9)


    (defn own-string-9b (s)
      (strlen (ref (own-string-9 (ref s) 5))))

    (def own-ast-9b (lambda-to-ast (code own-string-9b)))
    (def own-con-9b (gencon own-ast-9b))
    (def own-asta-9b (annotate-ast own-ast-9b))
    (let [free (:free own-asta-9b)]
      (do (assert-eq '(:fn (:string) :int) (:type own-asta-9b))
          (bake* own-string-9b '(own-string-9))
          (assert-eq 2 (count free))
          (assert-eq :string (:type (nth free 0)))
          (assert-eq :string (:type (nth free 1)))
          (assert-eq "s" (:name (nth free 1)))
          (assert-eq (own-string-9b "yeah") 6)))


    (defn own-if-10 (s)
      (if (< (strlen s) 10) (string-copy "short") (string-copy "long")))

    (def own-ast-10 (lambda-to-ast (code own-if-10)))
    (def own-con-10 (gencon own-ast-10))
    (def own-asta-10 (annotate-ast own-ast-10))
    (defn test-own-10 ()
      (let [free (:free own-asta-10)]
        (do (assert-eq '(:fn ((:ref :string)) :string) (:type own-asta-10))
            (bake own-if-10)
            (assert-eq 0 (count free))
            (assert-eq (own-if-10 "hej") "short")
            (assert-eq (own-if-10 "hejsansvejsan") "long"))))
    (test-own-10)


    (defn own-if-11 (s)
      (if (< (strlen (ref s)) 10) (string-copy "short") (string-copy "long")))

    (def own-ast-11 (lambda-to-ast (code own-if-11)))
    (def own-con-11 (gencon own-ast-11))
    (def own-asta-11 (annotate-ast own-ast-11))
    (defn test-own-11 ()
      (let [free (:free own-asta-11)]
        (do (assert-eq '(:fn (:string) :string) (:type own-asta-11))
            (bake own-if-11)
            (assert-eq 1 (count free))
            (assert-eq "s" (:name (first free)))
            (assert-eq :string (:type (first free)))
            (assert-eq (own-if-11 "hej") "short")
            (assert-eq (own-if-11 "hejsansvejsan") "long"))))
    (test-own-11)


    (defn own-if-12 (s)
      (if (< (strlen s) 10) (string-copy s) (string-copy "too long")))

    (def own-ast-12 (lambda-to-ast (code own-if-12)))
    (def own-con-12 (gencon own-ast-12))
    (def own-asta-12 (annotate-ast own-ast-12))
    (defn test-own-12 ()
      (let [free (:free own-asta-12)]
        (do (assert-eq '(:fn ((:ref :string)) :string) (:type own-asta-12))
            (bake own-if-12)
            (assert-eq 0 (count free))
            (assert-eq 0 (count (get-in own-asta-12 '(:body :free-right))))
            (assert-eq (own-if-12 "hej") "hej")
            (assert-eq (own-if-12 "hejsansvejsan") "too long"))))
    (test-own-12)


    (defn own-if-13 (x)
      (if (= x 10) (str-append "a" "!") (str-append "b" "!")))

    (def own-ast-13 (lambda-to-ast (code own-if-13)))
    (def own-con-13 (gencon own-ast-13))
    (def own-asta-13 (annotate-ast own-ast-13))
    (defn test-own-13 ()
      (let [free (:free own-asta-13)
            free-left (get-in own-asta-13 '(:body :free-left))
            free-right (get-in own-asta-13 '(:body :free-right))]
        (do (assert-eq '(:fn (:int) :string) (:type own-asta-13))
            (bake own-if-13)
            (assert-eq 0 (count free))
            (assert-eq 0 (count free-left))
            (assert-eq 0 (count free-right))
            (assert-eq (own-if-13 10) "a!")
            (assert-eq (own-if-13 11) "b!"))))
    (test-own-13)


    (defn own-if-13b (s)
      (if (< (strlen (ref s)) 10)
        (str-append (ref (string-copy "a"))
                    (ref (string-copy "!")))
        (str-append (ref (string-copy "b"))
                    (ref (string-copy "!")))))

    (def own-ast-13b (lambda-to-ast (code own-if-13b)))
    (def own-con-13b (gencon own-ast-13b))
    (def own-asta-13b (annotate-ast own-ast-13b))

    (defn test-own-13b ()
      (let [free (:free own-asta-13b)
            free-left (get-in own-asta-13b '(:body :free-left))
            free-right (get-in own-asta-13b '(:body :free-right))]
        (do (assert-eq '(:fn (:string) :string) (:type own-asta-13b))
            (bake own-if-13b)
            (assert-eq 1 (count free))
            (assert-eq 2 (count free-left))
            (assert-eq 2 (count free-right))
            (assert-eq (own-if-13b "short") "a!")
            (assert-eq (own-if-13b "loooooooooooooong") "b!"))))
    (test-own-13b)


    (defn own-binop-14 ()
      (+ (strlen (ref (string-copy "say"))) (strlen (ref (string-copy "what")))))

    (def own-ast-14 (lambda-to-ast (code own-binop-14)))
    (def own-con-14 (gencon own-ast-14))
    (def own-asta-14 (annotate-ast own-ast-14))
    (defn test-own-14 ()
      (let [free (:free own-asta-14)]
        (do (assert-eq '(:fn () :int) (:type own-asta-14))
            (bake own-binop-14)
            (assert-eq 2 (count free))
            (assert-eq (own-binop-14) 7))))
    (test-own-14)


    (defn own-binop-15 (s)
      (str-append (ref (itos (strlen (ref (string-copy "say"))))) (ref (itos (strlen (ref s))))))

    (def own-ast-15 (lambda-to-ast (code own-binop-15)))
    (def own-con-15 (gencon own-ast-15))
    (def own-asta-15 (annotate-ast own-ast-15))
    (defn test-own-15 ()
      (let [free (:free own-asta-15)]
        (do (assert-eq '(:fn (:string) :string) (:type own-asta-15))
            (bake own-binop-15)
            (assert-eq 4 (count free)) ;; free "say", two itos results, and s
            (assert-eq (own-binop-15 "what") "34")
            (assert-eq (own-binop-15 "") "30")
            (assert-eq (own-binop-15 "whats the deal?") "315"))))
    (test-own-15)


    (defn own-let-16 (s)
      (let [a (ref (string-copy "hello16"))]
        (strlen (ref s))))

    (def own-ast-16 (lambda-to-ast (code own-let-16)))
    (def own-con-16 (gencon own-ast-16))
    (def own-asta-16 (annotate-ast own-ast-16))
    (defn test-own-16 ()
      (let [free (:free own-asta-16)
            free-let (get-in own-asta-16 '(:body :free))]
        (do (bake own-let-16)
            (assert-eq '(:fn (:string) :int) (:type own-asta-16))
            (assert-eq 1 (count free)) ; free s
            (assert-eq 1 (count free-let))
            (assert-eq (own-let-16 "x") 1)
            )))
    (test-own-16)


    (defn own-let-17 ()
      (let [a (string-copy "hello")]
        a))

    (def own-ast-17 (lambda-to-ast (code own-let-17)))
    (def own-con-17 (gencon own-ast-17))
    (def own-asta-17 (annotate-ast own-ast-17))
    (defn test-own-17 ()
      (let [free (:free own-asta-17)
            free-let (get-in own-asta-17 '(:body :free))]
        (do (bake own-let-17)
            (assert-eq '(:fn () :string) (:type own-asta-17))
            (assert-eq 0 (count free))
            (assert-eq (own-let-17) "hello"))))
    (test-own-17)


    (defn own-let-18 ()
      (let [a "hello"]
        (strlen (ref (string-copy a)))))

    (def own-ast-18 (lambda-to-ast (code own-let-18)))
    (def own-con-18 (gencon own-ast-18))
    (def own-asta-18 (annotate-ast own-ast-18))
    (let [free (:free own-asta-18)
          free-let (get-in own-asta-18 '(:body :free))]
      (do (bake own-let-18)
          (assert-eq '(:fn () :int) (:type own-asta-18))
          (assert-eq 0 (count free))
          (assert-eq 1 (count free-let))
          (assert-eq (own-let-18) 5)))


    (defn own-let-19 ()
      (let [a "hello"]
        (eat-string (string-copy a))))

    (def own-ast-19 (lambda-to-ast (code own-let-19)))
    (def own-con-19 (gencon own-ast-19))
    (def own-asta-19 (annotate-ast own-ast-19))
    (defn test-own-19 ()
      (let [free (:free own-asta-19)
            free-let (get-in own-asta-19 '(:body :free))]
        (do (bake own-let-19)
            (assert-eq '(:fn () :void) (:type own-asta-19))
            (assert-eq 0 (count free))
            (assert-eq 0 (count free-let)))))
    (test-own-19)


    (defn own-while-20 (b)
      (while b
        (strlen (ref (string-copy "hej")))))

    (def own-ast-20 (lambda-to-ast (code own-while-20)))
    (def own-con-20 (gencon own-ast-20))
    (def own-asta-20 (annotate-ast own-ast-20))
    (defn test-own-20 ()
      (let [free (:free own-asta-20)
            free-while (get-in own-asta-20 '(:body :free))]
        (do (bake own-while-20)
            (assert-eq '(:fn (:bool) :void) (:type own-asta-20))
            (assert-eq 0 (count free))
            (assert-eq 1 (count free-while))
            (assert-eq :string (:type (first free-while)))
            )))
    (test-own-20)


    (defn own-while-21 (s)
      (while (< (strlen (ref s)) 10)
        (print (ref (string-copy "x")))))

    (def own-ast-21 (lambda-to-ast (code own-while-21)))
    (def own-con-21 (gencon own-ast-21))
    (def own-asta-21 (annotate-ast own-ast-21))
    (defn test-own-21 ()
      (let [free (:free own-asta-21)
            free-while (get-in own-asta-21 '(:body :free))]
        (do (bake own-while-21)
            (assert-eq '(:fn (:string) :void) (:type own-asta-21))
            (assert-eq 1 (count free))
            (assert-eq 1 (count free-while)))))
    (test-own-21)


    (defn own-do-22 (s)
      (do
        (strlen (ref s))
        (strlen (ref s))
        s))

    (def own-ast-22 (lambda-to-ast (code own-do-22)))
    (def own-con-22 (gencon own-ast-22))
    (def own-asta-22 (annotate-ast own-ast-22))
    (defn test-own-22 ()
      (let [free (:free own-asta-22)]
        (do (bake own-do-22)
            (assert-eq '(:fn (:string) :string) (:type own-asta-22))
            (assert-eq 0 (count free))
            (assert-eq (own-do-22 "hej") "hej"))))
    (test-own-22)


    (defn own-do-23 (s)
      (do
        (eat-string s)
        123))

    (def own-ast-23 (lambda-to-ast (code own-do-23)))
    (def own-con-23 (gencon own-ast-23))
    (def own-asta-23 (annotate-ast own-ast-23))
    (defn test-own-23 ()
      (let [free (:free own-asta-23)]
        (do (bake own-do-23)
            (assert-eq '(:fn (:string) :int) (:type own-asta-23))
            (assert-eq 0 (count free))
            (assert-eq (own-do-23 "hej") 123))))
    (test-own-23)


    (defn own-do-24 (s)
      (do
        (string-copy "Set me free!")
        (eat-string s)
        123))

    (def own-ast-24 (lambda-to-ast (code own-do-24)))
    (def own-con-24 (gencon own-ast-24))
    (def own-asta-24 (annotate-ast own-ast-24))
    (defn test-own-24 ()
      (let [free (:free own-asta-24)]
        (do (bake own-do-24)
            (assert-eq '(:fn (:string) :int) (:type own-asta-23))
            (assert-eq 1 (count free))
            (assert-eq (own-do-23 "hej") 123))))
    (test-own-24)


    (defn own-free-problem-25 ()
      (if true
        (let [x (string-copy "hej")]
          (if (< 3 5) ;; got some problem with if here
            (string-copy "yeah")
            (string-copy "nope")))
        (string-copy "gah")))

    (def own-ast-25 (lambda-to-ast (code own-free-problem-25)))
    (def own-con-25 (gencon own-ast-25))
    (def own-asta-25 (annotate-ast own-ast-25))
    (defn test-own-25 ()
      (let [free (:free own-asta-25)]
        (do (bake own-free-problem-25)
            (assert-eq '(:fn () :string) (:type own-asta-25))
            (assert-eq 0 (count free))
            (assert-eq 1 (count (get-in own-asta-25 '(:body :a :free)))) ;; free x
            (assert-eq (own-free-problem-25) "yeah"))))
    (test-own-25)


    (defn freeing-1 (b)
      (let [a (string-copy "a")]
        (if b
          a
          a)))

    (defn freeing-2 (b)
      (let [a (string-copy "a")]
        (if b
          (do (eat-string a) (string-copy ""))
          a)))

    (defn freeing-3 (b)
      (let [a (string-copy "a")]
        (if b
          (string-copy "yeah")
          a)))

    (defn freeing-4 (s)
      (eat-string
       (if (< (strlen (ref s)) 10)
         (string-copy "aaa")
         (string-copy "bbb"))))

    (defn freeing-5 (s)
      (strlen (ref (if (< (strlen (ref s)) 10)
                     (string-copy "aaa")
                     (string-copy "bbb")))))

    (defn freeing-6 (s)
      (let [managed (string-copy s)
            answer (string-copy "Four letter word")]
        (if (let [l (strlen (ref managed))]
              (= l 4))
          answer
          managed)))

    (bake freeing-1)
    (bake freeing-2)
    (bake freeing-3)
    (bake freeing-4)
    (bake freeing-5)
    (bake freeing-6)


    )) ;; end of ownership tests

;;(run-ownership-tests)



;; This one is weird:
(defn own-string-weird (s)
  (ref s))
