
(register-builtin "string_array_new" '(:int) ':string-array)
(register-builtin "string_array_count" '((:ref :string-array)) :int)
(register-builtin "string_array_get" '((:ref :string-array) :int) :string)
(register-builtin "string_array_set" '(:string-array :int (:ref :string)) ':string-array)

(def s (string-array-new 3))
(def s1 (string-array-set s 0 "yeah"))
(def s2 (string-array-set s1 1 "oh"))
(def s3 (string-array-set s2 2 "YEAH!"))

(defn string-array-print (a)
  (let [count (string-array-count a)
        i 0]
    (do (print "[")
        (while (< i count)
           (do (print "'")
               (print (ref (string-array-get a i)))
               (print "'")
               (when (not (= i (dec count)))
                 (print " "))
               (reset! i (inc i))
               ))
        (println "]"))))
(bake string-array-print)

(defmacro IF (x a b) (if x a b))
(defn test-if () (IF true (println "a") (println "b")))

(defn sf1 ()
  (let [a0 (string-array-new 2)
        a1 (string-array-set a0 0 "Hello, ")]    
    (str-append (ref (string-array-get (ref a1) 0)) "YEAH")))

(defn sf2 ()
  (let [a0 (string-array-new 2)]
    (let [a1 (string-array-set a0 0 "Hello, ")]
      (let [a2 (string-array-set a1 1 "world!")]
        (str-append (ref (string-array-get (ref a2) 0)) (ref (string-array-get (ref a2) 1)))))))

(defn sf3 ()
  (let [a0 (string-array-new 2)
        a1 (string-array-set a0 0 "Hello, ")]
    (do (string-array-new 10)
        (let [a2 (string-array-set a1 1 "world!")]
          (str-append (ref (string-array-get (ref a2) 0))
                      (ref (string-array-get (ref a2) 1)))))))

(defn test-string-array-1 ()
  (do 
    (bake sf1)
    (assert-eq "Hello, YEAH" (sf1))))
(test-string-array-1)

(defn test-string-array-2 ()
  (do
    (bake sf2)
    (assert-eq "Hello, world!" (sf2))))
(test-string-array-2)

(defn test-string-array-3 ()
  (do
    (bake sf3)
    (assert-eq "Hello, world!" (sf3))
    ))
(test-string-array-3)


(defn sf4 (b)
  (let [a (string-array-new 5)]
    (if b
      a
      (let [extra (string-array-new 5)]
        extra))))

(defn test-string-array-4 ()
  (do
    (bake sf4)
    (sf4 true)
    (sf4 false)
    ))
(test-string-array-4)


(defn sf5 (b)
  (let [a (string-array-set (string-array-new 5) 0 "bleh")]
    (if b
      a
      (let [extra (string-array-set (string-array-new 5) 0 "yeah")]
        extra))))

(defn test-string-array-5 ()
  (do
    (bake sf5)
    (sf5 true)
    (sf5 false)
    ))
(test-string-array-5)



(defn sf6 (b)
  (let [a (string-array-set (string-array-new 6) 0 "bleh")]
    (if b
      (string-copy "whut")
      (let [extra (string-array-set (string-array-new 6) 0 "yeah")]
        (string-copy "sup")))))

(defn test-string-array-6 ()
  (do
    (bake sf6)
    (sf6 true)
    (sf6 false)
    ))
(test-string-array-6)


(defn sf7 ()
  (let [a0 (string-array-new 2)
        a1 (string-array-set a0 0 "a")
        a2 (string-array-set a0 1 "b")] ;; Referencing a0 again, even though it was given away above!
    a2))

(defn test-string-array-7 ()
  (not (nil? (catch-error (bake sf7)))))
(test-string-array-7)


(defn string-array-last (xs)
  (let [count (string-array-count xs)]
    (string-array-get xs (- count 1))))

(defn test-string-array-last ()
  (do
    (bake string-array-last)
    (let [s0 (string-array-new 10)
          s1 (string-array-set s0 9 "yo")]
      (do (assert-eq "yo" (string-array-last s1))))))
(test-string-array-last)


(defn recursive-let ()
  (let [;; The other definition order should get caught by compiler, not clang:
        y "whaaaaaaat"
        x (str-append "hej" (ref (itos (strlen y))))
        ]
    x))
(bake recursive-let)

(defn fill-array [a pos value]
  (let [count (string-array-count (ref a))]
    (if (< pos count)
      (fill-array (string-array-set a pos value) (+ pos 1) value)
      a)))

(defn fill-array-2 [a pos value]
  (if (< pos (string-array-count (ref a)))
    (let [b (fill-array (string-array-set a pos value) (+ pos 1) value)]
      b)
    a))

(defn string-array-new-init (n init)
  (fill-array (string-array-new n) 0 init))

