
(register-builtin "string_array_new" '(:int) '(:ptr :string))
(register-builtin "string_array_count" '((:ptr :string)) :int)
(register-builtin "string_array_get" '((:ptr :string) :int) '(:ref :string))
(register-builtin "string_array_set" '((:ptr :string) :int :string) '(:ptr :string))

(def s (string-array-new 3))
(def s1 (string-array-set s 0 "yeah"))
(def s2 (string-array-set s1 1 "oh"))
(def s3 (string-array-set s2 2 "YEAH!"))

(defn string-array-print (a)
  (let [count (string-array-count a)
        i 0]
    (do (print "[")
        (while (< i count)
          (do (print (string-array-get a i))
              (when (not (= i (dec count))) (print " "))
              (reset! i (inc i))))
        (println "]"))))

(defn sf1 ()
  (let [a (string-array-new 2)
        ;;a0 (string-array-set a  0 "Hello, ")
        ;;a1 (string-array-set a0 1 "world!")
        ]
    (str-append (string-array-get a 0) (string-array-get a 1))))

(defn test-string-array-1 ()
  (bake sf1))
(test-string-array-1)

