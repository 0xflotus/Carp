
(register-builtin "string_array_new" '(:int) ':string-array)
(register-builtin "string_array_count" '((:ref :string-array)) :int)
(register-builtin "string_array_get" '((:ref :string-array) :int) '(:ref :string))
(register-builtin "string_array_set" '(:string-array :int (:ref :string)) ':string-array)

(def s (string-array-new 3))
(def s1 (string-array-set s 0 "yeah"))
(def s2 (string-array-set s1 1 "oh"))
(def s3 (string-array-set s2 2 "YEAH!"))

(defn string-array-print (a)
  (let [count (string-array-count a)
        i 0]
    (do (print "[")
        (while (< i count)
          (do (print (string-array-get a i))
              (when (not (= i (dec count))) (print " "))
              (reset! i (inc i))))
        (println "]"))))

(defn sf1 ()
  (let [a0 (string-array-new 2)]
    (let [a1 (string-array-set a0 0 "Hello, ")]
      (str-append (string-array-get (ref a1) 0) "YEAH"))))

(defn sf2 ()
  (let [a0 (string-array-new 2)]
    (let [a1 (string-array-set a0 0 "Hello, ")]
      (let [a2 (string-array-set a1 1 "world!")]
        (str-append (string-array-get (ref a2) 0) (string-array-get (ref a2) 1))))))

(defn sf3 ()
  (let [a0 (string-array-new 2)]
    (let [a1 (string-array-set a0 0 "Hello, ")]
      (do (string-array-new 10)
          (let [a2 (string-array-set a1 1 "world!")]
            (str-append (string-array-get (ref a2) 0) (string-array-get (ref a2) 1)))))))

(defn test-string-array-1 ()
  (do 
    (bake sf1)
    (assert-eq "Hello, YEAH" (sf1))))
(test-string-array-1)

(defn test-string-array-2 ()
  (do
    (bake sf2)
    (assert-eq "Hello, world!" (sf2))))
(test-string-array-2)

(defn test-string-array-3 ()
  (do
    (bake sf3)
    ;;(assert-eq "Hello, world!" (sf3))
    ))
;;(test-string-array-3)
