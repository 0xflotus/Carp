
;; (defstruct Vec2 [x :float y :float])

;; (def v (Vec2 3.0 4.0))

;; (def x (get-x v))
;; (def y (get-y v))

;; ;; pretend that the FauxVec2 type in shared.h is the same as Vec2 (they have the same memory layout):
;; (register-builtin "position" '() :Vec2)

;; (defn print-vec2 [m]
;;   (println (str (get-x m) ", " (get-y m))))




;; (defstruct Mix [a :int b :float c :int])

;; (def m (Mix 10 3.2 20))

;; (defn print-mix [m]
;;   (println (str "Mix: " (get-a m) ", " (get-b m) ", " (get-c m))))

;; (defstruct Mix2 [mix-a :Mix mix-b :Mix])
;; (def m2 (Mix2 (Mix 1 2.0 3) (Mix 4 5.0 6)))

;; (defn test-mix2 []
;;   (do
;;     (print-mix (get-mix-a m2))
;;     (print-mix (get-mix-b m2))))




(defstruct AnotherVector
  [xx :int
   yy :int])

(defn setter-1 []
  (let [v (AnotherVector 100 100)]
    (set-xx v 666)))

(defn test-setter-1 []
  (do (bake setter-1)
      (assert-eq 666 (get-xx (setter-1)))))

(test-setter-1)



(defn updater-1 []
  (let [v (AnotherVector 100 100)]
    (update-yy v inc)))

(defn test-updater-1 []
  (do (bake updater-1)
      (assert-eq 101 (get-yy (updater-1)))))

(test-updater-1)
