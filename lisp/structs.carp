
;; Should there be a way to mark existing C-structs?
;; (defmacro register-struct [struct-name]
;;   (register-struct-internal (str struct-name)))

;; (defn register-struct-internal [struct-name]
;;   (let [type-definition nil
;;         group-name ""
;;         dependency-level 0
;;         copy-signature (list :fn (list (list :ref (keyword struct-name))) (keyword struct-name))]
;;     (do
;;       ;;(graph/add-node! :struct struct-name type-definition "" group-name nil '() dependency-level)
;;       (graph/add-node! :struct (generic-name "copy" copy-signature) nil "" group-name nil '() dependency-level))))



(defmacro defstruct (struct-name struct-members)
  (let [names-and-types (split-every-second (array-to-list struct-members))]
    (list 'defstruct-internal
          (str struct-name)
          (keyword (name struct-name))
          (cons 'array (map str (first names-and-types)))
          (cons 'array (map (fn [x] (list 'quote x)) (second names-and-types))))))

(def log-redefining-struct false)

(defn defstruct-internal [struct-name struct-type member-names member-types]
  (do
    ;; (println (str "defstruct-internal: " struct-name
    ;;               " struct-type: " struct-type
    ;;               " member-names: " member-names
    ;;               " member-types: " member-types))
    
    (assert-eq (count member-names) (count member-types))

    (when (not (= 0 (count (filter ref? member-types))))
      (error {:error error-struct-with-ref-members
              :message (str "Problem with '" struct-name "', structs can't have reference member(s) of type: " (join ", " (filter ref? member-types)))
              :show-stacktrace false}))
    
    (when (def? (symbol struct-name))
      (when log-redefining-struct (println (str "Note: a struct named '" struct-name "' is already defined, overriding."))))

    (let [dependers (graph/depending-groups struct-name)]
      (do
        ;;(println (str "defstruct! Dependers for '" struct-name "': " (map :name dependers)))
        (graph/unload-group struct-name)
        (map graph/unload-group (set (map :group dependers)))
        ;;(println (str "graph nodes: " (keys graph)))

        (if (any? generic-type? (array-to-list member-types))
          (do
            (eval (list 'def (symbol struct-name) {:struct true
                                                   :generic true
                                                   :name struct-name
                                                   :member-names member-names
                                                   :member-types (if BYTECODE_EVAL member-types (list 'quote member-types))
                                                   :member-count (count member-names)
                                                   :significant-type-indexes
                                                   (if BYTECODE_EVAL
                                                     (apply array (significant-type-indexes (array-to-list member-types)))
                                                     (cons 'array (significant-type-indexes (array-to-list member-types))))
                                                   }))

            (define-generic-lens-stubs struct-name member-names member-types)
            
            :generic-struct)
          
          (do            
            (build-struct-group struct-name
                                struct-type
                                member-names
                                member-types
                                (calculate-dependency-level member-types)
                                (calculate-dependencies member-types))
            
            (eval (list 'def (symbol struct-name) {:struct true
                                                   :generic false
                                                   :name struct-name
                                                   :member-names member-names
                                                   :member-types (if BYTECODE_EVAL member-types (list 'quote member-types))
                                                   :size (eval (list (symbol (str "size-" struct-name))))
                                                   :member-offsets (map (fn [member] (eval (list (symbol (str struct-name "-offset-" member)))))
                                                                        member-names)
                                                   :member-count (count member-names)
                                                   }))
            
            ;; Finally we can add back the structs that were removed by 'unload-struct-deps'
            (map restore (set (map :group (sort-by compare-order dependers))))

            (keyword struct-name)))))))

(defn restore [name]
  (do
    ;;(println (str "restoring " name))
    (let [x (eval (symbol name))]
      (cond
        (foreign? x) (graph/re-lambda-fy name) ;; todo: bake again?
        (and (dict? x) (key-is-true? x :struct)) (defstruct-internal
                                                   name
                                                   (keyword name) ;; TODO: is this a bug when a generic struct is recompiled?
                                                   (:member-names x)
                                                   (:member-types x))
        _ (error (str "Can't restore '" name "'."))))))

(defn struct-type? [t]
  (if (list? t)
    (any? struct-type? t)
    (let [x (symbol (name t))
          lookup (if (def? x) (eval x) nil)]
      (and (dict? lookup) (key-is-true? lookup :struct)))))

(defn calculate-dependency-level [member-types]
  (if (or (= [] member-types) (nil? member-types))
    0
    (+ 1 (maximum (map (fn [t]
                         (if (list? t)
                           (calculate-dependency-level t)
                           (if (struct-type? t)
                             (calculate-dependency-level (:member-types (eval (symbol (name t)))))
                             -1)))
                       member-types)))))

;; Takes a list of types and returns a list of strings with the name of the depencies
(defn calculate-dependencies [member-types]
  (remove (fn [n] (= n "Array")) ;; <- this is a temporary hack!
          (map type-to-dependency-name (filter struct-type? (array-to-list member-types)))))

(defn type-to-dependency-name [x]
  (cond
    (nil? x) (error "Can't convert nil to dependency")
    (keyword? x) (name x)
    (list? x) (type-to-dependency-name (first x))
    :else (error (str "Can't handle: " x))))

(defn build-struct-group [struct-name struct-type member-names member-types dependency-level deps]
  (let [c-struct-name (c-ify-name struct-name)
        ;;struct-type (keyword struct-name)
        member-names (if (array? member-names) (array-to-list member-names) member-names) ;; TODO: This conversion is UGGLY!
        c-member-names (map c-ify-name member-names)
        member-types (if (array? member-types) (array-to-list member-types) member-types) ;; TODO: This one too!!!
        constructor-name (str "new-" struct-name)
        c-constructor-name (c-ify-name constructor-name)
        c-file-name (str out-dir constructor-name ".c")
        constructor-signature (list :fn member-types struct-type)
        ;;_ (println (str "member-types: " member-types))
        type-def-c (join " " (map2 (fn [t n] (str (type-build t) " " n ";")) member-types c-member-names))
        type-definition (str "typedef struct { " type-def-c " } " c-struct-name ";")
        group-name "" ;; struct-name
        ]
    (do
      (graph/add-node! :struct struct-name type-definition "" group-name nil '() dependency-level)
      (let [arg-list-c (join ", " (map2 (fn [t n] (str (type-build t) " " n)) member-types c-member-names))
            proto (str "API " c-struct-name " *" c-constructor-name "(" arg-list-c ");")
            substs {"STRUCT-NAME" c-struct-name
                    "CONSTRUCTOR-NAME" c-constructor-name
                    "ARG_LIST" arg-list-c
                    "SETTERS" (join "\n  " (map (fn [n] (str "new_struct->" n " = " n ";")) c-member-names))}
            c-program-string (template
                              "API STRUCT-NAME *CONSTRUCTOR-NAME(ARG_LIST) {
  STRUCT-NAME *new_struct = malloc(sizeof(STRUCT-NAME));
  SETTERS
  return new_struct;
}"
                              substs)
            group (concat
                   (list {:name constructor-name
                          :proto proto
                          :src c-program-string
                          :sig constructor-signature}
                         (let [size-signature (list :fn () :int)
                               size-proto (str "API int size_" c-struct-name "()")
                               size-c (str size-proto " { return sizeof(" c-struct-name "); } ")]
                           (lens-function (str "size-" struct-name) size-proto size-c size-signature)))
                   (apply concat (map2 (fn [mem-name mem-type]
                                         (lens-functions struct-name struct-type mem-name mem-type))
                                       member-names
                                       member-types)))]
        (do
          ;;(println (str "group: " group))
          (compiler/bake-group struct-name group deps))))))

(defn lens-functions [struct-name struct-type member-name member-type]
  (do
    ;;(println (str "Generating lens for '" struct-name "'-member '" member-name "' of type " member-type ", struct-type is " struct-type))
    (let [c-struct-name (c-ify-name struct-name)
          struct-t (type-build struct-type)
          member-t (type-build member-type)
          member-t-reffed (if (primitive-type? member-type)
                            member-type
                            (list :ref member-type))
          c-member-name (c-ify-name member-name)]
      (list
       (let [getter-signature (list :fn (list (list :ref struct-type)) member-t-reffed)
             getter-proto (str "API " member-t " " c-struct-name "_get_" (c-ify-name member-name) "(" struct-t " x)")
             getter-c (str getter-proto "{ return x->" c-member-name "; }")]
         (lens-function (str struct-name "-get-" member-name) getter-proto getter-c getter-signature))
       (let [setter-signature (list :fn (list struct-type member-type) struct-type)
             setter-proto (str "API " struct-t " " c-struct-name "_set_" (c-ify-name member-name) "(" struct-t " x, " member-t " value)")
             setter-c (str setter-proto "{ x->" c-member-name " = value; return x; }")]
         (lens-function (str struct-name "-set-" member-name) setter-proto setter-c setter-signature))
       (let [updater-fn-type (list :fn (list member-type) member-type)
             updater-fn-t (type-build updater-fn-type)
             updater-signature (list :fn (list struct-type updater-fn-type) struct-type)
             updater-proto (str "API " struct-t " " c-struct-name "_update_" (c-ify-name member-name) "(" struct-t " x, " updater-fn-t " f)")
             updater-c (str updater-proto "{ x->" c-member-name " = f(x->" c-member-name "); return x; }")]
         (lens-function (str struct-name "-update-" member-name) updater-proto updater-c updater-signature))
       (let [offset-signature (list :fn () :int)
             offset-proto (str "API " "int " c-struct-name "_offset_" (c-ify-name member-name) "()")
             offset-c (str offset-proto "{ return offsetof(" (c-ify-name struct-name) ", " c-member-name "); }")]
         (lens-function (str struct-name "-offset-" member-name) offset-proto offset-c offset-signature))))))

(defn lens-function [func-name proto src func-signature]
  (do
    (when (graph/node-exists? func-name)
      (do
        (println (str "WARNING! Overriding lens function: " func-name))
        ;;(graph/unload func-name)
        ))
    {:name func-name
     :proto (str proto ";")
     :src src
     :sig func-signature}))

(defn concretize-struct [struct-name concrete-struct-name concrete-types]
  (do
    ;;(println (str "\nconcretize-struct: " struct-name ", concrete-struct-name: " concrete-struct-name ", concrete-types: " concrete-types))
    (let [struct-description (eval (symbol struct-name))
          ;;_ (println (str "struct-description: " struct-description))

          member-names (:member-names struct-description)
          member-types (:member-types struct-description)
          
          ;; _ (when (not (= (count concrete-types) (count (set (array-to-list member-types)))))
          ;;     (error (str "The nr of concrete types must match the number of unique member-types: "
          ;;                 concrete-types " vs "
          ;;                 (set member-types))))

          mapping (reduce (fn [the-map key-value-pair]
                            (if (typevar? (first key-value-pair))
                              (assoc the-map (first key-value-pair) (second key-value-pair))
                              the-map))
                          {}
                          (map2 (fn [k v] (list k v)) (array-to-list member-types) concrete-types))
          ;;_ (println (str "mapping:\n" mapping))

          significant-type-indexes (:significant-type-indexes struct-description)
          ;;_ (println (str "significant-type-indexes: " significant-type-indexes))
          
          instantiated-significants (map (fn [i]
                                           (nth concrete-types i))
                                         significant-type-indexes)
          
          ;;_ (println (str "instantiated-significants: " instantiated-significants))

          struct-type (cons (keyword struct-name) (array-to-list instantiated-significants))
          ;;_ (println (str "struct-type: " struct-type))
          
          ]
      (if (def? (symbol concrete-struct-name))
        (do ;;(println (str "Will not concretize " concrete-struct-name " again."))
            :ignore)
        (defstruct-internal
          concrete-struct-name
          struct-type
          member-names
          (apply array concrete-types))
        ))))

;; struct-type is an list of concrete types,
;; beginning with the type of the generic struct
;; i.e. (:Pair :int)
(defn concretize-struct-simple [struct-type]
  (do
    ;;(println (str "\nconcretize-struct-simple: " struct-type))
    (let [struct-base-type (first struct-type)
          known-types (rest struct-type)
          struct-description (eval (symbol (name struct-base-type)))
          _ (assert-eq (count known-types) (count (:significant-type-indexes struct-description)))
          ;; _ (println (str "struct-description:\n" struct-description))

          member-types (:member-types struct-description)

          substs (reduce (fn [the-map key-value-pair]
                           (assoc the-map (first key-value-pair) (second key-value-pair)))
                         {}
                         (map2 (fn [i t]
                                 (list (nth member-types i) t))
                               (array-to-list (:significant-type-indexes struct-description))
                               known-types))
                         
          ;; _ (println (str "substs: " substs))
          
          struct-concrete-types (map (fn [t]
                                       (if (typevar? t)
                                         (get substs t)
                                         t))
                                     (array-to-list member-types))
          
          ;; _ (println (str "struct-concrete-types: " struct-concrete-types))
          struct-base-name (name struct-base-type)
          struct-concrete-name (generic-safe-name struct-type)]
      ;;(println (str "concretize-struct: " struct-base-name " " struct-concrete-name " " struct-concrete-types))
      (concretize-struct struct-base-name struct-concrete-name struct-concrete-types))))

;; Returns the indexes of the first occurence of each typevar in a list of types
;; Example 1 - ("a" "a" "b" "b") => [0 2]
;; Example 2 - (:int :int "t" "s" "t") => [2 3]
;; Example 3 - ("x" "y" "z") => [0 1 2]
(defn significant-type-indexes [types]
  (map first
       (reduce
        (fn [indexes pair]
          (if (and (typevar? (second pair))
                   (not (contains? (map second indexes) (second pair))))
            (cons-last indexes pair)
            indexes))
        '()
        (map2 (fn [i t] (list i t)) (range 0 (count types)) types))))

(defn dynamic-generic-constructor-call [struct-description args]
  (let [;;_ (println (str "dynamic-generic-constructor-call:\n" struct-description "\nargs: " args))
        struct-name (:name struct-description)
        arg-list (array-to-list args)
        concrete-types (map type-of-value arg-list)
        member-types (:member-types struct-description)
        unique-typevars (typevars-from-member-types member-types)
        significants (:significant-type-indexes struct-description)
        significant-types (array-to-list (map (fn [i] (nth concrete-types i)) significants))
        struct-type (cons (keyword struct-name) significant-types)
        concrete-struct-name (generic-safe-name struct-type)]
    (do
      (when (not (def? (symbol concrete-struct-name)))
        (do
          ;; (println (str struct-description))
          ;; (println (str "struct-name: " struct-name
          ;;               " concrete-struct-name: " concrete-struct-name
          ;;               " concrete-types: " concrete-types
          ;;               " significant-types: " significant-types
          ;;               ))
          (concretize-struct struct-name concrete-struct-name concrete-types)))
      (let [constructor-call (cons (symbol concrete-struct-name) arg-list)
            ;;_ (println (str "constructor-call: " constructor-call))
            struct-instance (eval constructor-call)]
        (do (meta-set! struct-instance :type struct-type)
            struct-instance)))))

(defn index-of [xs x]
  (let [result nil]
    (do
      (for (i 0 (count xs))
        (if (= x (nth xs i))
          (reset! result i)
          nil))
      (if (nil? result)
        (error (str "Can't find " x " in " xs))
        result))))

(defn define-generic-lens-stubs [struct-name member-names member-types]
  (do
    ;;(println (str "Defining generic lens stubs for " struct-name)) ;; " with member types " member-types))
    
    (map2 (fn [n t]
            (let [get-sym (symbol (str struct-name "-get-" n))
                  set-sym (symbol (str struct-name "-set-" n))
                  update-sym (symbol (str struct-name "-update-" n))
                  generic-vars (reverse (set (array-to-list (filter string? member-types))))
                  generic-struct-t (cons (keyword struct-name) generic-vars)
                  ;;_ (println (str "generic-struct-t: " generic-struct-t))
                  t (nth member-types (index-of member-names n))
                  get-s (list :fn (list generic-struct-t) t)
                  set-s (list :fn (list generic-struct-t t) generic-struct-t)
                  update-s (list :fn (list generic-struct-t (list :fn (list t) t)) generic-struct-t)
                  ;; _ (println (str "get-s : " (str get-s)))
                  ;; _ (println (str "set-s : " (str set-s)))
                  ;; _ (println (str "update-s : " (str update-s)))
                  ]
              (do
                ;; GETTER
                (eval (list 'defn get-sym (array 'o) (list 'do
                                                 (list 'concretize-struct-simple (list :type (list 'meta 'o)))
                                                 (list 'eval (list 'list
                                                                   (list 'symbol (list 'str
                                                                                    (list 'generic-safe-name
                                                                                          (list :type (list 'meta 'o)))
                                                                                    "-get-"
                                                                                    n))
                                                                   'o)))))
                (eval (list 'meta-set! get-sym :generic-lens-stub true))
                (eval (list 'meta-set! get-sym :struct struct-name))
                (eval (list 'meta-set! get-sym :generic true))
                (eval (list 'meta-set! get-sym :signature (list 'quote get-s)))
                (eval (list 'meta-set! get-sym :stub-ending (str "-get-" n)))

                ;; SETTER
                (eval (list 'defn set-sym (array 'o 'v) (list 'do
                                                        (list 'concretize-struct-simple (list :type (list 'meta 'o)))
                                                        (list 'eval (list 'list
                                                                          (list 'symbol (list 'str
                                                                                           (list 'generic-safe-name
                                                                                                 (list :type (list 'meta 'o)))
                                                                                           "-set-"
                                                                                           n))
                                                                          'o 'v)))))
                (eval (list 'meta-set! set-sym :generic-lens-stub true))
                (eval (list 'meta-set! set-sym :struct struct-name))
                (eval (list 'meta-set! set-sym :generic true))
                (eval (list 'meta-set! set-sym :signature (list 'quote set-s)))
                (eval (list 'meta-set! set-sym :stub-ending (str "-set-" n)))

                ;; UPDATER
                (eval (list 'defn update-sym (array 'o 'f) (list 'do
                                                           (list 'concretize-struct-simple (list :type (list 'meta 'o)))
                                                           (list 'eval (list 'list
                                                                             (list 'symbol (list 'str
                                                                                                 (list 'generic-safe-name
                                                                                                       (list :type (list 'meta 'o)))
                                                                                                 "-update-"
                                                                                                 n))
                                                                             'o 'f)))))
                (eval (list 'meta-set! update-sym :generic-lens-stub true))
                (eval (list 'meta-set! update-sym :struct struct-name))
                (eval (list 'meta-set! update-sym :generic true))
                (eval (list 'meta-set! update-sym :signature (list 'quote update-s)))
                (eval (list 'meta-set! update-sym :stub-ending (str "-update-" n)))
                )))
          member-names
          member-types)))

