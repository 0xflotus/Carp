
(defn generate-struct-lens [struct-name member-name member-type]
  (do ;;(println (str "Generating lens for '" struct-name "'-member '" member-name "' of type " member-type ))
      (let [struct-type (keyword struct-name)
            struct-t (type-build struct-type)
            member-t (type-build member-type)
            c-member-name (c-ify-name member-name)]
        (do
          (let [getter-signature (list :fn (list struct-type) member-type)
                getter-proto (str member-t " get_" (c-ify-name member-name) "(" struct-t " x)")
                getter-c (str getter-proto "{ return x->" c-member-name "; }")]
            (bake-struct-lens-function (new-builder) (str "get-" member-name) getter-signature getter-proto getter-c '()))))))

(defn bake-struct-lens-function [builder func-name func-signature proto c deps]
  (let [c-func-name (c-ify-name func-name)
        c-file-name (str out-dir c-func-name ".c")]
    (do
      (when (func-baked? func-name)
        (do
          (println (str "WARNING! Overriding lens function: " func-name))
          (unload-if-necessary func-name)))
      ;;(println (str "Baking struct lens: " func-name " / " c-func-name " with signature " func-signature))
      (let [c-program-string (str "#include <shared.h>\n#include \"functions.h\"\n" c)]
        (do
          (def c c-program-string)
          (save-and-compile func-name
                            func-signature
                            c-func-name
                            c-file-name
                            c-program-string
                            (str proto ";")
                            deps
                            false))))))
