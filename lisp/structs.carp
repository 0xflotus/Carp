
(defn build-constructor [struct-name member-names member-types]
  (let [member-names (if (array? member-names) (array-to-list member-names) member-names) ;; TODO: This conversion is UGGLY!
        c-member-names (map c-ify-name member-names)
        member-types (if (array? member-types) (array-to-list member-types) member-types) ;; TODO: This one too!!!
        constructor-name (str "new-" struct-name)
        c-constructor-name (c-ify-name constructor-name)
        c-file-name (str out-dir constructor-name ".c")
        constructor-signature (list :fn member-types (keyword struct-name))
        ;;_ (println (str constructor-signature))
        type-def-c (join " " (map2 (fn [t n] (str (type-build t) " " n ";")) member-types c-member-names))
        type-definition (str "typedef struct { " type-def-c " } " struct-name ";")
        ]
    (do
      (add-type! struct-name type-definition)
      ;;(println (str "types:\n" types))
      (save-function-prototypes)
      (if (func-baked? constructor-name)
        (do
          ;;(println (str "Ignoring already baked constructor '" constructor-name "'"))
          nil)
        (let [arg-list-c (join ", " (map2 (fn [t n] (str (type-build t) " " n)) member-types c-member-names))
              proto (str struct-name " *" c-constructor-name "(" arg-list-c ");")
              substs {"STRUCT-NAME" struct-name
                      "CONSTRUCTOR-NAME" c-constructor-name
                      "ARG_LIST" arg-list-c
                      "SETTERS" (join "\n  " (map (fn [n] (str "new_struct->" n " = " n ";")) c-member-names))}
              c-program-string (template
                                "#include \"functions.h\"\n\nAPI STRUCT-NAME *CONSTRUCTOR-NAME(ARG_LIST) {
  STRUCT-NAME *new_struct = malloc(sizeof(STRUCT-NAME));
  SETTERS
  return new_struct;
}"
                                substs)
              deps '()
              ]
          (do
            (def c c-program-string)
            (save-and-compile constructor-name constructor-signature c-constructor-name c-file-name c-program-string proto deps false)
            (map2 (fn [mem-name mem-type] (generate-struct-lens struct-name mem-name mem-type))
                  member-names
                  member-types)
            ))))))

(defn generate-struct-lens [struct-name member-name member-type]
  (do ;;(println (str "Generating lens for '" struct-name "'-member '" member-name "' of type " member-type ))
      (let [struct-type (keyword struct-name)
            struct-t (type-build struct-type)
            member-t (type-build member-type)
            c-member-name (c-ify-name member-name)]
        (do
          (let [getter-signature (list :fn (list struct-type) member-type)
                getter-proto (str member-t " get_" (c-ify-name member-name) "(" struct-t " x)")
                getter-c (str getter-proto "{ return x->" c-member-name "; }")]
            (bake-struct-lens-function (new-builder) (str "get-" member-name) getter-signature getter-proto getter-c '()))))))

(defn bake-struct-lens-function [builder func-name func-signature proto c deps]
  (let [c-func-name (c-ify-name func-name)
        c-file-name (str out-dir c-func-name ".c")]
    (do
      (when (func-baked? func-name)
        (do
          (println (str "WARNING! Overriding lens function: " func-name))
          (unload-if-necessary func-name)))
      ;;(println (str "Baking struct lens: " func-name " / " c-func-name " with signature " func-signature))
      (let [c-program-string (str "#include <shared.h>\n#include \"functions.h\"\n" c)]
        (do
          (def c c-program-string)
          (save-and-compile func-name
                            func-signature
                            c-func-name
                            c-file-name
                            c-program-string
                            (str proto ";")
                            deps
                            false))))))
