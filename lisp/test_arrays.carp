(tester/set-suite! "arrays")

(deftest test-array-literal
  (do
    (defn array-literal []
      [10 20 30])    
    (bake array-literal)))

(deftest test-get-a-float
  (do
    (defn get-a-float [xs]
      (* 2.0f (copy (nth xs 0))))
    (bake get-a-float)))

(deftest test-small-array
  (do
    (defn small-array []
      (let [a (array-of-size 3)
            b (array-set a 0 10)
            c (array-set b 1 20)
            d (array-set c 2 30)]
        d))
    (bake small-array)))

(deftest test-small-array-2
  (do
    (defn small-array-2 []
      (array-set
       (array-set
        (array-set
         (array-of-size 3)
         0 10)
        1 20)
       2 30))
    (bake small-array-2)))

(deftest test-array-literal
  (do
    (defn array-literal []
      [10 20 30])
    (bake array-literal)))

(deftest test-array-literal-2
  (do
    (defn array-literal-2 []
      [10.1 20.7 30.2])
    (bake array-literal-2)))

(deftest test-array-of-arrays
  (do
    (defn array-of-arrays []
      [(array-literal) (array-literal)])

    (bake array-of-arrays)))

(deftest test-print-array-of-vector
  (do
    (defstruct Vector
      [vectorX :int
       vectorY :int])
    (let [vecs [(Vector 1001 1002)
                (Vector 1003 1004)
                (Vector 1005 1006)]]
      (assert-eq "[(Vector 1001 1002) (Vector 1003 1004) (Vector 1005 1006)]" (str vecs)))))

(deftest test-nesting
  (do
    (defn nesting []
      [[(copy "hej")]])
    (bake nesting)))

(deftest test-copy-an-array-1
  (do
    (defn copy-an-array-1 []
      (let [a [100]]
        (copy (ref a))))
    (bake copy-an-array-1)
    (assert-eq (str [100]) (str (copy-an-array-1)))))

(deftest test-copy-an-array-2
  (do
    (defn copy-an-array-2 []
      (let [a [[1] [2]]
            b (copy (ref a))]
        b))
    (bake copy-an-array-2)
    (assert-eq [[1] [2]] (copy-an-array-2))))

(deftest disallow-refs-in-array
  (do
    (defn refs-in-array-func []
      (let [a ["bleh"]]
        a))
      (assert-error error-ref-in-array (bake refs-in-array-func))))

(tester/run-suite "arrays")
