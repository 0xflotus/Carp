(tester/set-suite! "arrays")

(defn array-literal []
  [10 20 30])

(deftest test-array-literal
  (bake array-literal))


(defn get-a-float [xs]
  (* 2.0f (copy (nth xs 0))))

(deftest test-get-a-float
  (do
    (bake get-a-float)))


;; Problematic...
;; (deftest test-int-array
;;   (+ 100 (copy (nth (array-of-size 3) 0))))


(defn small-array []
  (let [a (array-of-size 3)
        b (array-set a 0 10)
        c (array-set b 1 20)
        d (array-set c 2 30)]
    d))

(bake small-array)
;; (def small-ast (lambda-to-ast (code small-array)))
;; (def small-con (gencon small-ast))
;; (def small-sol (solve-constraints small-con))
;; (def small-asta (annotate-ast small-ast))


(defn small-array-2 []
  (array-set
   (array-set
    (array-set
     (array-of-size 3)
     0 10)
    1 20)
   2 30))

(bake small-array-2)
;; (def small-2-ast (lambda-to-ast (code small-array-2)))
;; (def small-2-con (gencon small-2-ast))
;; (def small-2-sol (solve-constraints small-2-con))
;; (def small-2-asta (annotate-ast small-2-ast))


(defn array-literal []
  [10 20 30])

(bake array-literal)


(defn array-literal-2 []
  [10.1 20.7 30.2])

(bake array-literal-2)


(defn array-of-arrays []
  [(array-literal) (array-literal)])

(bake array-of-arrays)


(defstruct Vector
  [vectorX :int
   vectorY :int])

(deftest test-print-array-of-vector
  (let [vecs [(Vector 1001 1002)
              (Vector 1003 1004)
              (Vector 1005 1006)]]
    (assert-eq "[(Vector 1001 1002) (Vector 1003 1004) (Vector 1005 1006)]" (str vecs))))


;; Nested arrays
(defn nesting []
  [[(copy "hej")]])
(bake nesting)


(defn copy-an-array-1 []
  (let [a [100]]
    (copy (ref a))))

(deftest test-copy-an-array-1
  (do
    (bake copy-an-array-1)
    (assert-eq (str [100]) (str (copy-an-array-1)))
    ))

;; (def copy-ast (lambda-to-ast (code copy-an-array-1)))
;; (def copy-con (generate-constraints copy-ast))
;; (def copy-sol (solve-constraints copy-con))
;; (def copy-asta (annotate-ast copy-ast))


(defn copy-an-array-2 []
  (let [a [[1] [2]]
        b (copy (ref a))]
    b))

(deftest test-copy-an-array-2
  (do
    (bake copy-an-array-2)
    (assert-eq [[1] [2]] (copy-an-array-2))
    ))

;; (def copy-2-ast (lambda-to-ast (code copy-an-array-2)))
;; (def copy-2-con (generate-constraints copy-2-ast))
;; (def copy-2-sol (solve-constraints copy-2-con))
;; (def copy-2-asta (annotate-ast copy-2-ast))


(deftest disallow-refs-in-array
  (do
    (defn refs-in-array-func []
      (let [a ["bleh"]]
        a))
    (let [caught (catch-error (bake refs-in-array-func))]
      (assert-eq error-ref-in-array
                 (:error caught)))))


(tester/run-suite "arrays")

