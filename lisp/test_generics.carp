(tester/set-suite! "generics")

;; (def id-ast (lambda-to-ast (code id)))
;; (def id-con (gencon id-ast))
;; (def id-asta (annotate-ast id-ast))

(deftest test-generic-id
  (do (bake id)
      (assert-eq true (meta-get id :generic))))

(deftest test-generic-call-1
  (do (defn generic-call-1 []
        (if (id true) 10 20))
      (bake generic-call-1)
      (assert-eq (signature generic-call-1) (list :fn () :int))))

(deftest test-generic-call-2
  (do (defn generic-call-2 [x]
        (+ (id 10) (id x)))
      (bake generic-call-2)
      (assert-eq (signature generic-call-2) (list :fn '(:int) :int))))

(deftest test-generic-call-3
  (do (defn generic-call-3 [x]
        (do (reset! x (id true))
            x))
      (bake generic-call-3)
      (assert-eq (signature generic-call-3) (list :fn '(:bool) :bool))))

(deftest test-generic-call-4
  (do (defn generic-call-4 []
        (let [pi (id 3.14f)]
          pi))(bake generic-call-4)
      (assert-eq (signature generic-call-4) (list :fn '() :float))))

(deftest let-polymorphism-1
  (do
    (defn polylet-1 []
      (let [a (id 1)
            b (id 2.0)]
        a))

    (bake polylet-1)))

(deftest let-polymorphism-2
  (do
    (defstruct A [])
    (defstruct B [])
    (defn polylet-2 []
      (let [a (copy (ref (A)))
            b (copy (ref (B)))]
        b))
    (bake polylet-2)))

(deftest test-generic-function-calling
  (do
    (defn a-function-as-argument [x y]
      (itos (+ x y)))
    (defn generic-function-calling-generic-functions [prob-f prob-a prob-b]
      (prob-f prob-a prob-b))
    (defn try-it-out []
      (generic-function-calling-generic-functions a-function-as-argument 10 20))
    (bake try-it-out)
    (assert-eq "30" (try-it-out))))

(deftest test-uniquify
  (let [n (uniquify-typevars '("T" :a "S" "T" ("S")))]
    (do (assert-eq (nth n 0) (nth n 3))
        (assert-eq (nth n 2) (get-in n '(4 0)))
        (assert-eq false (= (nth n 0) (nth n 2)))
        (assert-eq :a (nth n 1)))))

(deftest test-copy-1
  (do
    (defn copy-1 []
      (copy "CARP"))
    (bake copy-1)
    (assert-eq "CARP" (copy-1))))

(deftest test-copy-2
  (do
    (defstruct CopyMe [copyMeMember :int])
    (defn copy-2 []
      (copy (ref (CopyMe 666))))
    (bake copy-2)
    (assert-eq 666 (CopyMe-get-copyMeMember (copy-2)))))

(deftest test-copy-3
  (do
    (defstruct AnotherCopy [aNameToCopy :string anotherNameToCopy :string])
    (defn copy-3 [n1 n2]
      (copy (ref (AnotherCopy n1 n2))))
    (bake copy-3)
    (assert-eq "(AnotherCopy @\"AHA\" @\"BUHU\")" (str (ref (copy-3 "AHA" "BUHU"))))))

;; Test that functions depending on generic functions will be recompiled when the original generic function changes
(deftest test-depending-on-generic
  (do
    (defn idd [x] x)
    (defn use-idd []
      (idd 5))
    (defn use-user []
      (use-idd))
    (bake use-user)
    (defn idd [x] (* x 3))
    (bake idd)
    (assert-eq :foreign (type idd))
    (assert-eq 15 (use-user))))

;; Should put tests of realized generic primops into separate file?!
(deftest test-reduce-struct
  (do
    (defstruct Bleh [bleh-x :int])

    (defn add-bleh [b1 b2]
      (let [x (get-bleh-x &b1)]
        (set-bleh-x b1 (+ x (get-bleh-x b2)))))

    ;;(update-bleh-x b1 (fn [x] (+ x (get-bleh-x b2))))

    ;; (Bleh (+ (get-bleh-x &b1)
    ;;            (get-bleh-x b2)))

    (defn reduce-over-bleh []
      (let [stuff [(Bleh 10) (Bleh 20) (Bleh 30)]
            a (reduce add-bleh (Bleh 0) &stuff)
            b (reduce add-bleh (Bleh 100) &stuff)
            c (reduce add-bleh (Bleh 2000) &stuff)]
        (println* &[a b c])))))

(deftest test-reduce-int
  (do
    (defn add [a b]
      (+ a @b))
    (defn r1 []
      (reduce add 0 &[1 2 3 4 5]))))

(tester/run-suite "generics")
