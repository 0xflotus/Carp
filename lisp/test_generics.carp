(tester/set-suite! "generics")

(def id-ast (lambda-to-ast (code id)))
(def id-con (gencon id-ast))
(def id-asta (annotate-ast id-ast))

(deftest test-generic-id
  (do (bake id)
      (assert-eq true (meta-get id :generic))))



(defn generic-call-1 []
  (if (id true) 10 20))

(deftest test-generic-call-1
  (do (bake generic-call-1)
      (assert-eq (signature generic-call-1) (list :fn () :int))))



(defn generic-call-2 [x]
  (+ (id 10) (id x)))

(deftest test-generic-call-2
  (do (bake generic-call-2)
      (assert-eq (signature generic-call-2) (list :fn '(:int) :int))))



(defn generic-call-3 [x]
  (do (reset! x (id true))
      x))

(deftest test-generic-call-3
  (do (bake generic-call-3)
      (assert-eq (signature generic-call-3) (list :fn '(:bool) :bool))))



(defn generic-call-4 []
  (let [pi (id 3.14f)]
    pi))

(deftest test-generic-call-4
  (do (bake generic-call-4)
      (assert-eq (signature generic-call-4) (list :fn '() :float))))



;; Let-polymorphism
(defn polylet-1 []
  (let [a (id 1)
        b (id 2.0)]
    a))

(bake polylet-1)



(defstruct A [])
(defstruct B [])

(defn polylet-2 []
  (let [a (copy (ref (A)))
        b (copy (ref (B)))]
    b))

(bake polylet-2)



(defn istr []
  (str 42))
(bake istr)

(defn star []
  (str (ref [7 3 4])))
(bake star)

(defn star-f []
  (str (ref [7.2 3.1 4.2])))
(bake star-f)

(defn star-s []
  (str (ref [(string-copy "yeah") (string-copy "oh")])))
(bake star-s)



(defn a-function-as-argument [x y]
  (itos (+ x y)))

(defn generic-function-calling-generic-functions [prob-f prob-a prob-b]
  (prob-f prob-a prob-b))

(defn try-it-out [] (generic-function-calling-generic-functions a-function-as-argument 10 20))

(deftest test-function-as-argument
  (do
    (bake try-it-out)
    (assert-eq "30" (try-it-out))))



(deftest test-uniquify
  (let [n (uniquify-typevars '("T" :a "S" "T" ("S")))]
    (do (assert-eq (nth n 0) (nth n 3))
        (assert-eq (nth n 2) (get-in n '(4 0)))
        (assert-eq false (= (nth n 0) (nth n 2)))
        (assert-eq :a (nth n 1)))))



(defn copy-1 []
  (copy "CARP"))

(deftest test-copy-1
  (do
    (bake copy-1)
    (assert-eq "CARP" (copy-1))))



(defstruct CopyMe [copyMeMember :int])

(defn copy-2 []
  (copy (ref (CopyMe 666))))

(deftest test-copy-2
  (do
    (bake copy-2)
    (assert-eq 666 (get-copyMeMember (copy-2)))))



(defstruct AnotherCopy [aNameToCopy :string anotherNameToCopy :string])

(defn copy-3 [n1 n2]
  (copy (ref (AnotherCopy n1 n2))))

(deftest test-copy-3
  (do
    (bake copy-3)
    (assert-eq "(AnotherCopy \"AHA\" \"BUHU\")" (str (ref (copy-3 "AHA" "BUHU"))))))



;; Test that functions depending on generic functions will be recompiled when the original generic function changes
(defn idd [x] x)

(defn use-idd []
  (idd 5))

(defn use-user []
  (use-idd))

(deftest test-depending-on-generic
  (do
    (bake use-user)
    (defn idd [x] (* x 3))
    (bake idd)
    (assert-eq :foreign (type idd))
    (assert-eq 15 (use-user))))




;; DELETE FUNCTION (shouldn't be used in user code really... but you can!)

;; These are problematic now for some reason..?!

;; (defn delete-1 []
;;   (delete (copy "CARP")))

;; (bake delete-1)



;; (defstruct DeleteMe [deleteThisMember :int])

;; (defn delete-2 []
;;   (delete (DeleteMe 10000)))

;; (bake delete-2)



;; (defn delete-3 []
;;   (delete [1 2 3]))

;; (bake delete-3)



;; (defn delete-4 []
;;   (delete [[] [1] [1 2] [1 2 3]]))

;; (bake delete-4)



(tester/run-suite "generics")
