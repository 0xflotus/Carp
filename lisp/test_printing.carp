(tester/set-suite! "printing")

(deftest test-str-of-objs
  (do
    (assert-eq "hej" (str "hej"))
    (assert-eq "a" (str \a))
    (assert-eq "123" (str 123))
    (assert-eq "3.140000f" (str 3.14f))
    (assert-eq "10.500000" (str 10.5))
    (assert-eq "true" (str true))
    (assert-eq "false" (str false))))

(deftest test-prn-of-objs
  (do
    (assert-eq "\"hej\"" (prn "hej"))
    (assert-eq "\\a" (prn \a))
    (assert-eq "123" (prn 123))
    (assert-eq "3.140000f" (prn 3.14f))
    (assert-eq "10.500000" (prn 10.5))
    (assert-eq "true" (prn true))
    (assert-eq "false" (prn false))))

(deftest test-baked-strs
  (do (defn str-a-string []
        (str "hej"))
      (bake str-a-string)
      (assert-eq "hej" (str-a-string))

      (defn str-a-char []
        (str \y))
      (bake str-a-char)
      (assert-eq "y" (str-a-char))))

(deftest test-baked-prns
  (do (defn prn-a-string []
        (prn "hej"))
      (bake prn-a-string)
      (assert-eq "\"hej\"" (prn-a-string))

      (defn prn-a-char []
        (prn \y))
      (bake prn-a-char)
      (assert-eq "\\y" (prn-a-char))))

(deftest str-struct-dynamic
  (do (defstruct StrMe [str-me-string :string])
      (assert-eq "(StrMe \"yeah\")" (str (StrMe "yeah")))))

(deftest prn-struct-dynamic
  (do (defstruct PrnMe [prn-me-string :string])
      (assert-eq "(PrnMe \"yeah\")" (prn (PrnMe "yeah")))))

(deftest str-struct-compiled
  (do (defstruct StrMe2 [str-me-2-string :string])
      (defn str-me []
        (str &(StrMe2 @"yeah")))
      (bake str-me)
      (assert-eq "(StrMe2 \"yeah\")" (str-me))))

(deftest prn-struct-compiled
  (do (defstruct PrnMe2 [prn-me-2-string :string])
      (defn prn-me []
        (prn &(PrnMe2 @"yeah")))
      (assert-eq "(PrnMe2 \"yeah\")" (prn-me))))

(deftest str-array-dynamic
  (assert-eq "[1 2 3]" (str [1 2 3])))

(deftest prn-array-dynamic
  (assert-eq "[1 2 3]" (prn [1 2 3])))

(deftest str-array-compiled
  (do
    (defn str-an-array []
      (str &[@"a" @"b" @"c"]))
    (bake str-an-array)
    (assert-eq "[\"a\" \"b\" \"c\"]" (str-an-array))))

(deftest prn-array-compiled
  (do
    (defn prn-an-array []
      (prn &[@"a" @"b" @"c"]))
    (bake prn-an-array)
    (assert-eq "[\"a\" \"b\" \"c\"]" (prn-an-array))))

(deftest test-improved-str
  (do
    (defstruct Woah [woah-name :string])
    (defn use-str []
      (str* "x = " 10 ", name = " "ERIK " &(Woah @"bleh") " ... " &[@"a" @"b" @"c"]))
    (bake use-str)
    (assert-eq "x = 10, name = ERIK (Woah \"bleh\") ... [\"a\" \"b\" \"c\"]" (use-str))))

(tester/run-suite "printing")
