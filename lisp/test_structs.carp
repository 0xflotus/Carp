(tester/set-suite! "structs")

;; (defstruct Vec2 [x :float y :float])

;; (def v (Vec2 3.0 4.0))

;; (def x (get-x v))
;; (def y (get-y v))

;; ;; pretend that the FauxVec2 type in shared.h is the same as Vec2 (they have the same memory layout):
;; (register-builtin "position" '() :Vec2)

;; (defn print-vec2 [m]
;;   (println (str (get-x m) ", " (get-y m))))




;; (defstruct Mix [a :int b :float c :int])

;; (def m (Mix 10 3.2 20))

;; (defn print-mix [m]
;;   (println (str "Mix: " (get-a m) ", " (get-b m) ", " (get-c m))))

;; (defstruct Mix2 [mix-a :Mix mix-b :Mix])
;; (def m2 (Mix2 (Mix 1 2.0 3) (Mix 4 5.0 6)))

;; (defn test-mix2 []
;;   (do
;;     (print-mix (get-mix-a m2))
;;     (print-mix (get-mix-b m2))))




(defstruct AnotherVector
  [xx :int
   yy :int])

(defn setter-1 []
  (let [v (AnotherVector 100 100)]
    (AnotherVector-set-xx v 666)))

(deftest test-setter-1
  (do (bake setter-1)
      (assert-eq 666 (AnotherVector-get-xx (setter-1)))))



(defn updater-1 []
  (let [v (AnotherVector 100 100)]
    (AnotherVector-update-yy v inc)))

(deftest test-updater-1
  (do (bake updater-1)
      (assert-eq 101 (AnotherVector-get-yy (updater-1)))))



(deftest test-redefining-struct
  (do
    (defstruct Prime [prime-x :int])
    (defstruct Prime2 [prime2-member :Prime])
    (defstruct Prime3 [prime3-member :Prime2])
    (defn farao [p]
      (Prime-get-prime-x p))
    (bake farao)
    (assert-eq "10" (str (farao (Prime 10))))

    (defstruct Prime [prime-x :int prime-y :int])
    (assert-eq "20" (str (farao (Prime 20 30))))
    (bake farao)
    (assert-eq "40" (str (farao (Prime 40 50))))
    (assert-eq "(Prime3 (Prime2 (Prime 1000 2000)))" (str (Prime3 (Prime2 (Prime 1000 2000)))))))



;; GENERIC STRUCTS

(deftest test-generic-pair-dynamic
  (do
    (defstruct TestPair
      [a "t"
       b "t"])
    (let [p1 (TestPair 10 20)
          p2 (TestPair true false)]
      (do
        (assert-eq "(TestPair 10 20)" (str p1))
        (assert-eq 10 (TestPair-get-a p1))
        (assert-eq 20 (TestPair-get-b p1))
        (assert-eq "(TestPair true false)" (str p2))
        (assert-eq true (TestPair-get-a p2))
        (assert-eq false (TestPair-get-b p2))))))

(deftest test-generic-pair-compiled-constructor
  (do
    (defstruct TestPair2
      [a "t"
       b "t"])
    (defn fff1 []
      (TestPair2 10 20))
    (defn fff2 []
      (TestPair2 true false))
    (bake fff1)
    (bake fff2)
    (let [p1 (fff1)
          p2 (fff2)]
      (do
        (assert-eq "(TestPair2 10 20)" (str p1))
        (assert-eq 10 (TestPair2-get-a p1))
        (assert-eq 20 (TestPair2-get-b p1))
        (assert-eq "(TestPair2 true false)" (str p2))
        (assert-eq true (TestPair2-get-a p2))
        (assert-eq false (TestPair2-get-b p2))))))

(deftest test-generic-pair-compiled-lenses
  (do
    (defstruct TestPair
      [a "t"
       b "t"])
    (defn use-update-lens [x]
      (TestPair-update-a (TestPair-update-b x inc) dec))
    (bake use-update-lens)
    (assert-eq :foreign (type use-update-lens))
    (assert-eq "(TestPair 9 21)" (str (use-update-lens (TestPair 10 20))))))

(deftest test-generic-pair-compiled-everything
  (do
    (defstruct TestPair
      [a "t"
       b "t"])
    (defn use-test-pair [x]
      (TestPair-get-a (TestPair-set-b x @"no")))
    (defn use-use-test-pair []
      (use-test-pair (TestPair @"yes" @"yeah")))
    (bake use-use-test-pair)
    (assert-eq "yes" (use-use-test-pair))))

(deftest test-type-with-multiple-typevars
  (do
    (defstruct TestTuple
      [a "t"
       b "u"
       c "t"])
    (assert-eq "(TestTuple true \\x false)" (str (TestTuple true \x false)))))

(deftest test-type-with-concrete-types-also
  (do
    (defstruct TestWeirdTuple
      [a "t"
       b :bool
       c "u"])
    (assert-eq "(TestWeirdTuple \\a true \\c)" (str (TestWeirdTuple \a true \c)))))

(deftest struct-with-inner-struct
  (do
    (defstruct InnerStruct
      [foo :int])
    (defstruct SomeGenericStruct
      [x "t"])
    (assert-eq "(SomeGenericStruct 10)" (str (SomeGenericStruct 10)))
    (assert-eq "(SomeGenericStruct [1 2 3])" (str (SomeGenericStruct [1 2 3])))
    (assert-eq "(SomeGenericStruct (InnerStruct 123))" (str (SomeGenericStruct (InnerStruct 123))))))

(tester/run-suite "structs")
