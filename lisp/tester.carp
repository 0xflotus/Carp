(def *active-test-suite* "")

(defn tester/set-suite! [test-suite-name]
  (reset! *active-test-suite* test-suite-name))

(def tester/test-suites {})

(defn tester/add-test! [test-name]
  (let [existing-tests (get-maybe tester/test-suites *active-test-suite*)]
    (reset! tester/test-suites (assoc tester/test-suites *active-test-suite* (cons-last existing-tests test-name)))))

(defn tester/run-suite [test-suite-name]
  (let [tests (get tester/test-suites test-suite-name)
        failed-count 0
        start-time (now)]
    (if (= 0 (count tests))
      (println (str (get-console-color console-color-yellow)
                    "No tests to run in test suite '" test-suite-name "'."
                    (get-normal-console-color)))
      (do (map (fn [test-name]
                 (let [test-func (eval (symbol test-name))
                       e (catch-error (test-func))]
                   (if (nil? e)
                     :success
                     (do
                       (println (str (get-console-color console-color-red)
                                     (inc failed-count) "."
                                     " Error in test '" test-name "' \n"
                                     (get-normal-console-color)
                                     e "\n"))
                       (swap! failed-count inc)))))
               tests)
          (println (str (if (= 0 failed-count)
                          (get-console-color console-color-green)
                          (get-console-color console-color-red))
                        "Ran " (count tests) " tests in test suite '" test-suite-name
                        "', " failed-count " of them failed (took " (/ (- (now) start-time) 1000) " secs)."
                        (get-normal-console-color)))))))

(defmacro deftest [name body]
  (list 'do
        (list 'defn name [] body)
        (list 'tester/add-test! (prn name))))

;; Example usage:
;; (tester/set-suite! "foo")
;; (deftest t1 (assert-eq 2 2))
;; (deftest t2 (assert-eq 3 3))
;; (deftest t3 (assert-eq 12 12))
;; (tester/run-suite "foo")

;; (defmacro in-test-suite [test-suite-name forms]
;;   (list 'do
;;         (list 'reset! *active-test-suite* (prn test-suite-name))
;;         forms
;;         (list 'reset! *active-test-suite* (prn ""))))
