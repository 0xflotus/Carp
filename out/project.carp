(reset! echo-signature-after-bake true)
(reset! log-unloading-of-dylibs true)

(when (not carp-dev)
  (do
    ;;(load-lisp (str carp-dir "lisp/glfw_test.carp"))
    (load-lisp (str carp-dir "lisp/examples.carp"))
    nil
    ))

;;(load-gl)

(defn copy-an-array-1 []
  (let [a [100]]
    (copy (ref a))))

(defn test-copy-an-array-1 []
  (do
    (bake copy-an-array-1)
    (assert-eq (str [100]) (str (copy-an-array-1)))
    ))

(test-copy-an-array-1)

;; (def copy-ast (lambda-to-ast (code copy-an-array-1)))
;; (def copy-con (generate-constraints copy-ast))
;; (def copy-sol (solve-constraints copy-con))
;; (def copy-asta (annotate-ast copy-ast))


(defn copy-an-array-2 []
  (let [a [[10 20 30] [40 50 60]]
        b (copy (ref a))]
    b))

(defn test-copy-an-array-2 []
  (do
    (bake copy-an-array-2)
    (assert-eq (str "[[10, 20, 30], [40, 50, 60]]") (str (copy-an-array-2)))
    ))

(def copy-2-ast (time (lambda-to-ast (code copy-an-array-2))))
(def copy-2-con (time (generate-constraints copy-2-ast)))
(def copy-2-sol (time (solve-constraints copy-2-con)))
(def copy-2-asta (time (annotate-ast copy-2-ast)))

(test-copy-an-array-2)
