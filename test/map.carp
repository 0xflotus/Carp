(use Map)

(load "Test.carp")
(use Test)

(deftest test
  (assert-equal test
                "2"
                &(Map.get &(Map.put (Map.create) "1" "2") "1")
                "basic put and get works"
  )
  (assert-equal test
                "3"
                &(Map.get &(Map.put (Map.put (Map.create) "1" "2") "1" "3") "1")
                "put, update and get"
  )
  (assert-equal test
                "2"
                &(Map.get &(Map.put (Map.create) &-7 "2") &-7)
                "basic put and get works with negative keys"
  )
  (assert-equal test
                1
                (Map.length &(Map.put (Map.create) "1" "2"))
                "length works"
  )
  (assert-equal test
                0
                (Map.length &(the (Map.Map Int Int) (Map.create)))
                "length works on empty map"
  )
  (assert-equal test
                false
                (Map.contains? &(the (Map.Map String Int) (Map.create)) "1")
                "contains? works on empty map"
  )
  (assert-equal test
                true
                (Map.contains? &(Map.put (Map.create) "1" "2") "1")
                "contains? works"
  )
  (assert-equal test
                true
                (Map.contains? &(Map.put (Map.create) &-7 "2") &-7)
                "contains? works with negative keys"
  )
  (assert-equal test
                false
                (Map.contains? &(Map.put (Map.create) &1 "2") &-7)
                "contains? works with negative keys"
  )
  (assert-equal test
                true
                (Map.empty? &(the (Map Int Int) (Map.create)))
                "empty? works on empty map"
  )
  (assert-equal test
                false
                (Map.empty? &(Map.put (Map.create) "1" "2"))
                "empty? works"
  )
  (assert-equal test
                true
                (Map.empty? &(Map.remove (Map.put (Map.create) "1" "2") "1"))
                "remove works"
  )
  (assert-equal test
                2
                (Map.length &(Map.from-array &[(Pair.init 1 2)
                                               (Pair.init 3 4)]))
                "creating a map from an array works"
  )
  (assert-equal test
                "{ 1 2 }"
                &(str &(Map.from-array &[(Pair.init 1 2)]))
                "stringification works I"
  )
  (assert-equal test
                "{ @\"hi\" @\"bye\" }"
                &(str &(Map.from-array &[(Pair.init @"hi" @"bye")]))
                "stringification works II"
  )
  (assert-equal test
                2
                (Set.length &(Set.put (Set.put (Set.create) "1") "2"))
                "length works"
  )
  (assert-equal test
                1
                (Set.length &(Set.put (Set.put (Set.create) "1") "1"))
                "putting the same element twice doesn't increase size"
  )
  (assert-equal test
                0
                (Set.length &(the (Set.Set Int) (Set.create)))
                "length works on empty map"
  )
  (assert-equal test
                false
                (Set.contains? &(the (Set.Set String) (Set.create)) "1")
                "contains? works on empty map"
  )
  (assert-equal test
                true
                (Set.contains? &(Set.put (Set.create) "1") "1")
                "contains? works"
  )
  (assert-equal test
                true
                (Set.contains? &(Set.put (Set.create) &-7) &-7)
                "contains? works with negative keys"
  )
  (assert-equal test
                true
                (Set.empty? &(the (Set Int) (Set.create)))
                "empty? works on empty map"
  )
  (assert-equal test
                false
                (Set.empty? &(Set.put (Set.create) "1"))
                "empty? works"
  )
  (assert-equal test
                true
                (Set.empty? &(Set.remove (Set.put (Set.create) "1") "1"))
                "remove works"
  )
  (assert-equal test
                "{ @\"hi\" @\"bye\" }"
                &(str &(Set.from-array &[@"hi" @"bye"]))
                "stringification works"
  ))
