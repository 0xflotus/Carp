(use IO)
(use Int)
(use Float)
(use Double)
(use Array)
(use System)
(use Char)

(load "Test.carp")
(use Test)

(defn assert-no-leak [state f descr]
    (do
      (reset-memory-balance)
      (f)
      (assert-equal state 0l (memory-balance) descr)))

(defn scope-1 []
  (let [s @"hej"]
    ()))

(defn main []
  (let []
    (with-test test
      (assert-no-leak test
                      scope-1
                      "scope-1 doesn't leak")
      (print-test-results test))))


;; (deftype A [])

;; (defn a []
;;   (let [aha (A.init)
;;         hah (A.init)]
;;     hah))

;; (defn e []
;;   @"hej")

;; (defn g []
;;   (let [s @"hej"]
;;     s))

;; (defn h []
;;   (let [s @"hej"]
;;     (println (ref s))))

;; (defn i [s]
;;   (do (println s)
;;       @"hej"))

;; (defn j [s]
;;   (do (noop (address s))
;;       @"hej"))

;; (defn k []
;;   (let [s @"hej"]
;;     (do (println "?")
;;         123)))

;; (defn l []
;;   (do (noop (address @"hej"))
;;       (println (ref @"blub"))
;;       @"ccccc"))

;; (defn m []
;;   (let [x "yes"]
;;     (do (println x)
;;         (println x))))
