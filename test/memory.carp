(use IO)
(use Int)
(use Float)
(use Double)
(use Array)
(use System)
(use Char)

(load "Test.carp")
(use Test)

(defn assert-no-leak [state f descr]
    (do
      (reset-memory-balance)
      (f)
      (assert-equal state 0l (memory-balance) descr)))

(defn scope-1 []
  (let [s @""]
    ()))

(defn scope-2 []
  (let [s @""]
    (print &s)))

(defn scope-3 []
  (let [s @""]
    (do (print "")
        ())))

(defn f []
  @"")

(defn call-1 []
  (let [s (f)]
    ()))

(defn g [s]
  ())

(defn call-2 []
  (let [s (g @"")]
    ()))


(defn main []
  (let []
    (with-test test
      (assert-no-leak test
                      scope-1
                      "scope-1 doesn't leak")
      (assert-no-leak test
                      scope-2
                      "scope-2 doesn't leak")
      (assert-no-leak test
                      scope-3
                      "scope-3 doesn't leak")
      (assert-no-leak test
                      call-1
                      "call-1 doesn't leak")
      (assert-no-leak test
                      call-2
                      "call-2 doesn't leak")
      (print-test-results test))))


;; (deftype A [])

;; (defn a []
;;   (let [aha (A.init)
;;         hah (A.init)]
;;     hah))
